{"data":[{"id":2836,"title":"SELinux dan Docker data-root","url":"https://www.evilfactorylabs.org/widnyana/selinux-dan-docker-data-root-35e2","body":"Kapan hari saya perlu memindahkan data-root directory docker dari kampung halamannya di /var/lib/docker ke /mnt/storage-0/docker karena persoalan ruang di partisi utama yang semakin menipis. Sebagai konteks, mesin ini menggunakan OS Centos 8 dengan SELinux: Enforcing. \nKalau melihat dokumentasi yang ada, cara mindahin data-root sebenernya ga ribet, langsung aja edit file /etc/docker/daemon.json, dan tambahin line dibawah, copy semua file dari directory lama, terus restart docker daemonnya.\n{\n...\n  \"data-root\": \"/mnt/storage-0/docker\",\n...\n}\n\nSayangnya, ternyata tidak semudah itu Fergusso. Semua emang terlihat lancar sampai ketika saya menggunakan fitur buildkit. Command docker build ... selalu gagal, dengan pesan error:\n0.479 standard_init_linux.go:228: exec user process caused: permission denied\n\n\nRefleklah ngecek audit.log, akhirnya ketahuan kalau directory /mnt/storage-0/docker belum dikasih label yang sesuai biar dikenali sama SELinux sebagai \"rumah\" nya si docker. \nIsi lognya begini:\n...\ntype=AVC msg=audit(1627476572.116:8223): avc: denied { entrypoint } for pid=277147 comm=\"runc:[2:INIT]\" path=\"/bin/busybox\" dev=\"overlay\" ino=202821668 scontext=system_u:system_r:container_t:s0:c257,c579 tcontext=system_u:object_r:unlabeled_t:s0 tclass=file permissive=0\ntype=AVC msg=audit(1627478254.522:8273): avc: denied { entrypoint } for pid=287085 comm=\"runc:[2:INIT]\" path=\"/bin/busybox\" dev=\"overlay\" ino=202821668 scontext=system_u:system_r:container_t:s0:c358,c450 tcontext=system_u:object_r:unlabeled_t:s0 tclass=file permissive=0\n...\n\nYaudah, berarti tinggal dilabelin sesuai dengan label directory lamanya, ambil contekan dulu pakai command ini:\ngrep docker /etc/selinux/targeted/contexts/files/file_contexts | grep \"/var/lib/docker\n\nCopy yang sesuai dengan kasus, terus bikin command buat ngedefinisiin context mapping directory data-root barunya si docker:\nsemanage fcontext -a -s system_u -t container_var_lib_t         \"/mnt/storage-0/docker(/.*)?\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/.*/config\\.env\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/init(/.*)?\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/overlay(/.*)?\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/overlay2(/.*)?\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/containers/.*/hosts\";\nsemanage fcontext -a -s system_u -t container_log_t             \"/mnt/storage-0/docker/containers/.*/.*\\.log\";\nsemanage fcontext -a -s system_u -t container_ro_file_t         \"/mnt/storage-0/docker/containers/.*/hostname\";\n\nAbis eksekusi command diatas, terus jalanin command dibawah buat melabeli ulang directory tersebut secara rekursif sesuai dengan context yang tadi udah diset:\nrestorecon -Rv /mnt/storage-0/docker\n\nUdah deh, \nsebelum negara api menyerang.","tags":"selinux,docker,sysadmin","media":"tulisan","thumbnail":null,"owner":"Wid","draft":false,"original_published_at":"2021-07-29T16:24:30","created_at":"2021-07-29T18:12:00.239836","updated_at":"2021-07-29T18:12:00.239836","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2824,"title":"Ngulik Desain API Identity Access Management (IAM) Google Cloud","url":"https://www.youtube.com/watch?v=o4g1pKA0yQY","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-28T03:31:20","created_at":"2021-07-27T00:34:00.208352","updated_at":"2021-07-27T00:34:00.208352","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2826,"title":"Hukum Asosiatif","url":"https://www.evilfactorylabs.org/ri7nz/hukum-asosiatif-39en","body":"Apa ini ? kenapa bawah2 hukum segala!\nDengan adanya hukum maka sesuatu menjadi ketat, \"teratur\" secara paksa, dan tunduk sebagaimana seorang warga negara yang berada pada sebuah sistem. Meskipun, pada dasarnya manusia adalah makhluk yang \"bebas\" dan dikarunia \"kebebasan\" untuk menjadi apa dan untuk apa.\nKembali ke Topik utama, yakni tentang \"Functional Programming\" atau pemrograman fungsional. Membahas topik ini, menurut penulis begitu banyak hal yang bisa dibahas, sehingga sulit untuk berhenti untuk membahasnya (seperti prinsip Evilfactorylabs, belajar itu bukan destinasi atau tujuan tetapi sebuah perjalanan mulia yang tak pernah berhenti). Pada tulisan ini, membahas salah satu dan bagian kecil dari konsep, teori, dan hukum yang ada pada pemrograman fungsional. Yakni, Hukum Asosiatif atau the law of associativity. \nSebelum membahas soal Asosiatif, kita harus mempelajari dulu tentang \"compose\", dalam\nDalam matematika, sifat asosiatif[1] adalah sifat dari beberapa operasi biner, yang berarti bahwa mengatur ulang tanda kurung dalam ekspresi yang tidak mengubah hasilnya. Dalam logika proposisional, asosiativitas adalah valid kaidah penggantian untuk ekspresi dalam bukti logika.\n\nContohnya,\n(2 + 3) + 4 = 2 + (3 + 4) = 9\n\nDari contoh diatas, ada 2 hal yang berbeda tetapi sama, yang berbeda adalah urutan operasi (lihat buka dan tutup kurungnya), yang sama adalah hasilnya meskipun urutan (buka dan tutup kurungnya) berbeda. \nNamun, contoh diatas dibuat dalam bentuk operasi Matematika, bagaimana jika kita membuatnya menjadi fungsi dalam pemrograman, berikut contohnya (yah, ditulis pakai JavaScript biar terlihat trendi dan menaikkan strata sosial).\nlet compose = (f, g) => x => f(g(x))\nlet add = (a, b) => a + b\n\nlet addTwo = b => add(2, b)\nlet addFour = b => add(4, b)\n\nlet assocX = compose(addTwo, addFour)\nlet assocY = compose(addFour, addTwo)\n\n// identifikasi bahwa {assocX} dan {assocY} \n// ketika diberi nilai {3} \n// maka menghasilkan hal yang sama atau {true}\nassocX(3) === assocY(3)\n// 9 === 9\n// contoh lain \n\nlet exclaim = str => `${str} !`\nlet toLowerCase = str => str.toLowerCase()\n\nlet assocA = compose(toLowerCase, exclaim)\nlet assocB = compose(exclaim, toLowerCase)\n\nassocA(\"HEY\") === assocB(\"HEY\")\n// \"hey !\" === \"hey !\"\n\nContoh diatas, terdapat sebuah fungsi yang bernama {compose}, fungsi tersebut untuk menyusun operasi atau peng-aplikasi-an dari beberapa fungsi yang dimana memiliki parameter yang sama (Nanti, kita bahas lebih detail untuk Compose).\nTidak susah sebenarnya, untuk memahami apa itu Asosiatif, intinya Asosiatif digunakan untuk mengetahui hasil akhir dari beberapa fungsi yang dioperasikan selalu sama, Meskipun urutan dari fungsinya berbeda. Namun, ada beberapa hal yang sangat penting tetapi tidak dimuat dalam tulisan kali ini, Hal tersebut yakni Pure-Function (fungsi tanpa efek samping, atau selalu menghasilkan hal yang sama), Hal tersebut sangat penting sebelum kamu membaca tulisan ini atau sedang mempelajari lebih lanjut paradigma pemrograman fungsional. Jika kamu sangat tertarik, kamu bisa Kesini...","tags":"fp,functional,programming,sd","media":"tulisan","thumbnail":null,"owner":"RiN","draft":false,"original_published_at":"2021-07-27T13:47:06","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2827,"title":"Membuat Discord Webhooks Untuk Menangkap Notifikasi Github Repository ","url":"https://www.evilfactorylabs.org/fncolon/membuat-discord-webhooks-untuk-notifikasi-github-repository-42a4","body":"Kadang untuk mencari tahu update di github repository dari issue, pull request, dan push ataupun security, kita harus bulak balik buka github repositorynya di website, dan menurut gw itu akan menjadi sangat tidak efisien kalau sudah jadi habit.\nUntuk memecahkan masalah itu, gw coba explore dan ketemu yang namanya webhooks, kebetulan discord memberi support untuk webhooks pada server-server discord, tentu saja kamu harus punya privilege administrator atau founder untuk menggunakan webhooks pada server tersebut.\nDi artikel ini, gw pengen panduin kalian untuk bagaimana sih memasang webhooks ini dari discord ke github repository? tentu saja tanpa terlalu banyak basa-basi seperti pada hal-nya artikel yang sebelumnya gw buat dan langsung penjelasan ke-inti-nya.\nLangsung saja #markicob!\nPertama, kalian harus mempersiapkan discord dan belajar bagaimana menggunakan discord terlebih dahulu.\nsedikit joke\nWebhook adalah sebuah konsep API, dimana dia menyediakan informasi untuk aplikasi lain secara realtime, webhook sering disebut juga sebagai Reverse API karena harus dirancang supaya bisa digunakan oleh provider webhook, webhook memiliki dua bentuk response yaitu JSON dan XML atau sebagai data form yaitu x-www-form-urlencoded atau multipart/form-data.\nBerikut langkah-langkah mempersiapkan discord webhooks pada github repository kamu!\nBuka Discord dan persiapkan server dengan membuat server atau gunakan server yang sudah ada untuk membuat webhooks (pastikan disini kamu memiliki role Administrator ataupun Server Founder yang ditandai dengan mahkota).\n\n\nBuka server tersebut lalu tekan bagian pada bagian yang ditunjuk pada gambar dibawah ini, lalu klik pilihan Server Settings.\n\n\n\n\nSetelah membuka Server Settings kemudian klik pada bagian Integrations.\n\nSetelah membuka Integrations kemudian klik pada bagian Create Webhooks (jika kamu/bot (secara otomatis) sudah membuat webhooks sebelumnya untuk keperluan lain maka tulisannya menjadi View Webhooks).\n\nSetelah itu, klik tombol Create Webhook (jika kamu/bot (secara otomatis) sudah membuat webhooks sebelumnya untuk keperluan lain maka klik pada tombol New Webhook).\n\nSetelah klik tombol tersebut kamu akan mengisi informasi terkait Webhook tersebut, lalu klik pada tombol Copy Webhook URL, disini saya merekomendasikan untuk membuat text channel masing-masing untuk setiap repository, supaya lebih rapih dan ter-manage dengan mudah. \n\nJika kamu mengalami kesulitan dalam membuat text channel, ikuti langkah dibawah ini\nKembali ke halaman server kalian, lalu klik tombol + seperti yang ditunjukkan oleh gambar dibawah ini.\n\nSetelah muncul modal popup Create Text Channel, silahkan isi nama channel, lalu klik Create Channel\n\n\n\n\nSetelah membuat webhook kita akan lanjut ke langkah berikutnya yaitu mempersiapkan github repository untuk menggunakan webhook dari Discord yang sebelumnya sudah kita buat dan copy URLnya.\nBerikut langkah-langkah mempersiapkan github repository untuk menggunakan discord webhooks yang sudah kamu buat!\nBuka github repository yang sudah kamu persiapkan lalu klik pada bagian Settings\n\n\n\n\nSetelah membuka Settings lalu klik pada bagian Webhooks\n\n\n\n\nSetelah itu, klik pada tombol Add webhook.\n\nSetelah itu kamu akan mendapatkan tampilan seperti dibawah lalu isi dengan contoh input yang diperlukan seperti dibawah ini.\n\n1). Isi Payload URL dengan URL yang sudah kamu copy melalui tombol Copy Webhook URL pada Discord sebelumnya lalu tambahkan prefix /github di URL tersebut. (contoh https://discord.com/api/webhooks/{RANDOM_CHARACTER}/github\napplication/json pada pilihan Content type\nJust the push event. jika kamu hanya ingin menerima notifikasi push dari aktifitas branch, pilih Send me everything. untuk menerima segala notifikasi dari aktifitas pada github repository tersebut, dan pilih Let me select individual events. untuk menerima notifikasi dari beberapa aktifitas saja. Aktifitas di github repository ini disebut sebagai event pada Github.\nSetelah mengisi input yang diperlukan lalu klik pada tombol Add webhook\n\n\n\n\nSetelah menambah webhook, kamu akan dialihkan ke halaman sebelumnya dan pastikan webhook sudah ceklis untuk memastikan bahwa konfigurasi kamu benar.\n\nDan selesai sudah perjalanan kita untuk menambahkan Discord webhook di github 😄, selanjutnya kita harus memastikan bahwa setiap event pada github repository sudah ditangkap oleh webhook dari Discord tersebut.\nMari kita coba push sesuatu pada github repository tersebut! \nDisini saya menambahkan file README di branch bernama main.\n\nMari kita cek dan lihat ada keajaiban apa yang terjadi, dan voila! event push pada github repository tersebut sudah masuk ke text channel dari Discord webhook yang dibuat sebelumnya! 🎉\n\nSekian artikel yang bisa saya bagikan, semoga bermanfaat 😃","tags":"discord,webhooks,github,serverless","media":"tulisan","thumbnail":null,"owner":"fnc","draft":false,"original_published_at":"2021-07-27T05:54:02","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2828,"title":"Gue Bosen Sama VS Code, dan Ini yang Gue Lakuin! 😤","url":"https://www.evilfactorylabs.org/nyancodeid/gue-bosen-sama-vs-code-dan-ini-yang-gue-lakuin-en","body":"Pernah nggak sih kalian bosen sama Visual Studio Code atau VS Code? atau editor lain kesayangan kalian deh. Mau Sublime Text, Atom, Jetbrain Product, MS. Word 🙄 atau yang lain. Gue? iya gue udah bosen. Kenapa? ya karena cuma benda itu yang gue lihat dan pakai tiap kali ngoding. Ngoding bertahun-tahun dan cuma benda itu aja yang gue liat, come on? masak kalian nggak bosen sih. \n\nUdah ngelakuin beberapa hal buat menyingkirkan kebosenan yang selalu muncul tiap harinya. Sampai pada suatu titik gue install VS Code, Sublime Text, Webstorm, PHPStorm, dan IntelliJ IDEA buat dipakai gantian buat nyari suasana baru tiap kali rasa bosen itu balik lagi. Berhasil? ya, tapi setiap editor pasti punya pros dan cons (Pro dan Kontra). Nah buat gue yang menyebut dirinya sendiri sebagai Javascript Developer, VS Code emang yang paling canggih sih. Extensions yang beragam, Autocomplete yang ajib, Intellisense yang behhh. Dan yang baru baru ini nih, Github Copilot udah jangan ditanya gimana rasanya, mending lu coba sendiri aja sana.\nOke, kita fokusin masalah ini ke si VS Code. Buat ngatasin rasa bosen gue sama tampilan VS Code yang gitu gitu aja, gue coba gonta-ganti dan cari kombinasi yang pas antara Font, Color Theme, dan Theme. Cara ini terbukti efektif sih karena udah setahunan gue nerapin hal ini dan works. But, gue selalu merasa bahwa VS Code ini kayaknya kurang lega tampilannya. Berasa sempit gitu. Nah saat gue lagi browsing di Facebook, nemu postingan show off tampilan Code Editor. Gue kaget dong, kok familar gitu tampilannya. Dan ternyata VS Code anjir. Tapi keren banget, berubah 180 derajat. Gue cari-cari gimana cara bikin tampilan kayak gitu dan akhirnya gue nemu artikel ini. Dan penulisnya siapa? gue sendiri. Lah plot twist 😵.\nAnyway, sekarang kalian paham kan kenapa gue bikin tulisan ini, gue mau berbagi gimana caranya biar VS Code kalian tidak terlihat gitu gitu aja. Bukan cuma ganti Font, Color Theme, dan Theme doang. Markicobbb!!\nSebelum kalian ngikutin step-by-step selanjutnya, kalian harus punya hal-hal yang dibutuhkan berikut:\nVisual Studio Code\nFont Hasklig - Download Disini https://github.com/i-tu/Hasklig/releases\n\nFont Fira Code - Download Disini https://github.com/tonsky/FiraCode/releases\n\nKoneksi Internet (Buat Download Extension dan Theme)\nSetelah semua sudah siap, kalian bisa lanjut step selanjutnya.\nPertama, kita install Theme yang mendukung buat design ini, disini gue pakai Github Theme. Buat install theme nya pilih menu View > Extensions atau pakai shortcut Ctrl+Shift+X. Kita cari Github Theme, pilih yang atas sendiri lalu install. \n\nSetelah instalasinya selesai, kita bisa langsung pilih Color Theme. Kita pilih yang Github Dark Default karena backgroundnya hitam pekat, gila feel dark nya dapet banget.\n\nGue udah coba pakai color theme atau theme yang Dracula tapi hitamnya kurang nendang. Masih abu abu tua gitu. Tapi bisa kalian coba sendiri kombinasikan theme apa yang cocok menurut kalian pribadi. Buat yang pakai Light Mode semoga kalian mendapat pencerahan dari light theme kalian bahwa kodrat programmer itu pakai Dark Mode 😳✌️.\nKedua, setelah theme kita lanjut setting fontnya. Buka halaman settings di menu File > Prefereces > Settings atau pakai shortcut Ctrl+Comma. Cari Editor: Font Family, disini kita setting font family buat Editor Area-nya ya, karena kita nanti juga bakalan setting buat font yang lain. Disini gue pakai Hasklig Mono kalau kalian pengen yang lain, rekomendasi gue sih Dank Mono tapi berbayar ya guys. Kalau Hasklig mah gratis dan bentuk fontnya hampir sama kayak Fira Code, tapi menurut gue masih lebih bagus Hasklig sih. \n\nOptional aja sih ini, tergantung selara kalian. Disini gue set nilai Editor: Line Height-nya jadi 1.5 biar space antar line jadi lebih lega dan nggak begitu mempet kayak dia sama temenmu. Lanjut.\nKetiga, nah ini nih pemeran utamanya. Yang bikin VS Code jadi beda dan makin keren. Nama Extensionya Customize UI. Kalian bisa search di menu View > Extensions atau pakai shortcut Ctrl+Shift+X lalu cari Customize UI. Lalu install extension-nya. \n\nSetelah berhasil terinstall kita bakalan lihat alert disuruh buat enable Monkey Patch, agar extension bisa bekerja sesuai harapan. Tapi kalau kalian nggak sengaja nutup alertnya kalian masih bisa enable via Command Palette Ctrl+Shift+P lalu cari Enable Monkey Patch dan enter, nanti bakalan disuruh restart VS Code tinggal klik restart aja. \n\nNah belum selesai sampai situ, baru kita lanjut konfigurasi extensionnya. Eits, perlu kalian ketahui nih jadi tiap perubahan pengaturan di extension ini butuh restart VS Code, gue rekomendasiin kalian selesaiin dulu settingnya sampai selesai, baru restart diakhir. Nanti bakalan ada popup buat restart VS Codenya dipojok kanan bawah.\nUntuk buka pengaturan extension Customize UI, kita klik gambar gear/pengaturan lalu pilih Extension Settings. Baru deh kita bisa custom lebih lanjut. \n\nSetalah itu bakalan kebuka halaman buat setting extensionnya seperti dibawah ini.\n\nNah untuk pengaturan Customize UI: Activity Bar ini buat milih posisi activity bar nya mau diletakkan disebalah mana, kalau gue sih pilih bottom. Biar dia kebawah biar space disamping jadi lebih lebar. Oh iya perlu kalian tau kalau kalian mindah activity bar nya kebawah kalian nggak bisa buka/tutup sidebarnya pakai icon itu lagi. Misalnya kita buka file Explorer, untuk buka/tutup Explorer biasanya kalian kan bisa klik iconnya lagi (toggle). Nah kalau ditaruh bawah kita nggak bisa pakai cara itu. Kita harus pakai shortcut Ctrl+B buat buka/tutup (toggle) sidebarnya.\n\nAda 2 pengaturan untuk font disini, yaitu Monospace dan Regular. Ini untuk memilih font family yang nantinya dijadikan font utama di VS Code nya, eits bukan untuk Editor Area ya, tapi buat aplikasi VS Codenya. Disini gue milih font Hasklig Mono (lagi) untuk Customize UI > Font: Monospace dan Fira Code untuk yang Customize UI > Font: Regular.\n\nUntuk Statusbar nya kita pindah dibawah panel. Jadi pengaturan Customize UI > Move Statusbar ini dicentang aja. Biar statusbar nggak banyak makan tempat. Karena kita mao semuanya minimalis dan berbeda.\n\nNah sampai tahap ini kalian bisa klik Restart VS Code nya biar konfigurasinya ke-reload. \n\nAnd voila seharusnya kamu sudah bisa lihat perubahan dari VS Code kamu. 😍\n\nTapi ada satu lagi konfigurasi yg bikin makin kece lagi. \n\nKita buka lagi halaman Settings lewat menu  File > Prefereces > Settings atau pakai shortcut Ctrl+Comma, lalu cari Window: Title Bar. Nah biar tampilan judul VS Code gabung jadi satu sama Menu atau Toolbar maka kita ubah yang awalnya Native jadi Custom. Setelah itu bakalan ada popup buat restart VS Code-nya. Kita restart langsung. Boom!!! 🤯\n\nHasil akhirnya bakalan seperti ini, mirip nggak sama tampilan kalian? kalau nggak mirip atau bahkan jauh lebih bagus bisa dong tulis di kolom komentar dibawah ya.\n\nSekian. Semoga bermanfaat dan bikin makin produktif. Tetap jaga kesehatan, and see you leter. 🥳","tags":"vscode,texteditor,productivity","media":"tulisan","thumbnail":null,"owner":"Ryan Aunur Rassyid","draft":false,"original_published_at":"2021-07-26T17:09:31","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2829,"title":"Membuat VSCode ala ala wibu untuk meningkatkan produktifitas","url":"https://www.evilfactorylabs.org/fncolon/membuat-vscode-ala-ala-wibu-untuk-meningkatkan-produktifitas-1433","body":"I would rather die of passion than of boredom.\nPemrograman seringkali menjadi aktifitas yang membosankan jika tidak ada hal menarik yang mengelilingi aktifitas pemrograman anda, diantaranya itu ilmu yang menarik, setup yang memadahi, dan tools yang menambah dopamin pemrograman.\nSebelum memulai tutorial ini pastikan untuk menginstall VSCode terlebih dahulu.\nLangsung Saja Kita Mulai!!\nBerikut adalah hal-hal yang akan anda tambahkan ke VSCode anda.\n\nCode with your waifu! adalah tagline yang digunakan oleh The Doki Theme, dimana ini adalah sebuah tema vscode yang menampilkan tema dengan waifu-waifu yang mungkin anda suka sebagai wallpaper di VSCode, selain itu juga tema ini memiliki fitur glass pane dimana VSCode anda akan terlihat transparan dengan wallpaper tersebut.\nInstalasinya cukup mudah.\nBuka VSCode anda.\nCTRL + Shift + X\nKetik The Doki Theme\n\nKlik The Doki Theme\n\nInstall The Doki Theme\n\nSelesai!!\nAnda bisa mengganti tema melalui View > Command Palette > Doki-Theme. \nSaya merekomendasikan color theme Steins-Gate Kurisu saja dari The Doki Theme, karena warna font tidak terlalu menyatu dengan warna tema, atau jika anda hanya tertarik dengan background waifu dan fitur glass panenya dan ingin menggunakan color theme bawaan vscode/tema lain, cukup disable ekstensinya.\nBerikut contoh tampilan VSCode saya ketika menggunakan tema ini :\n\n#LohKokWhiteTheme\nhanya contoh! tapi jangan dicontoh ya!\nDaftar Wallpaper : https://marketplace.visualstudio.com/items?itemName=unthrottled.doki-theme#about\nhttps://github.com/doki-theme/doki-theme-vscode\n\nNgoding adalah jalan ninjaku\nInstalasinya cukup mudah.\nDownload ninja_naruto dan konfigurasi fontnya.\n\n\nTambahkan line dibawah ini didalam object pada settings.json:\n\n\n\n  \"editor.fontFamily\": \"'Ninja Naruto'\"\n\nlokasi untuk Windows %APPDATA%\\Code\\User\\settings.json\n\nlokasi untuk Mac $HOME/Library/Application Support/Code/User/settings.json\n\nlokasi untuk Linux $HOME/.config/Code/User/settings.json\n\n\n\n\n3. Reload VSCode dan Selesai! (maaf di quote karena ke reset jadi satu lmao)\nSelain Ninja Naruto Font, anda juga bisa menggunakan Death Note \n dengan step instalasi yang tidak jauh berbeda.\n\"editor.fontFamily\": \"'Death Note Font'\"\n\n\nSekian, terima kasih.\nNB: Artikel ini hanya untuk referensi yang menghibur saja, tidak harus juga jika anda wibu menggunakan hal-hal seperti ini, cukup menonton anime yang ada isi waifu anda.","tags":"meme,vscode,productivity,anime","media":"tulisan","thumbnail":null,"owner":"fnc","draft":false,"original_published_at":"2021-07-26T01:06:54","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2830,"title":"Tehnik subnetting untuk mencari range ip pada sebuah network","url":"https://www.evilfactorylabs.org/adiatma/tehnik-subnetting-untuk-mencari-range-ip-pada-sebuah-network-14e3","body":"Tulisan tentang networking kedua ini adalah dasar atau fundamental di dunia networing.\nArtikel ini adalah lanjutan dari artikel sebelumnya yaitu tentang dasar network dan ip address.\nOh iya subnetting adalah cara efektif untuk menentukan total ip di dalam sebuah network. di artikel ini kita akan belajar berdasarkan contoh kasus nyata.\nMisalnya di sebuah kantor ada sekitar 50 devices yang akan di hubungkan dalam sebuah koneksi yang bernama LAN (Local Area Network).\nUntuk itu perlu untuk menentukan IPv4 private yang akan digunakan. di kasus ini saya akan pakai 172.16.10.0 selanjutnya, perlu untuk mencari berdasarkan rumus yang ada gambar bawah ini.\n\nJadinya prefix yang kita bisa pakai berdasarkan hasil hitungan diatas adalah 26, yang memiliki kapasitas sekitar 64 ip address.\nSelanjutnya adalah menentukan subnetmask, rumus untuk mencari subnetmask adalah 256 - total ip = <subnetmask> jadinya 256 - 64 = 192, nah jika di implementasikan dalam sebuah subnetmask jadinya 255.255.255.192, angka hasilnya dimasukan di akhir byte, karena default angka subnetmask adalah 255.255.255.x x nya adalah angka yang kita dapat dari penjumlahan sebelumnya.\nSetelah menemukan angkanya hal selanjutnya adalah mencari ip network dan ip broadcast, ip network akan selalu di awali dengan angka 0, dan ip broadcast adalah angka ip terakhir, kemudian menentukan block subnet seperti contoh pada gambar di bawah ini.\n\nBerdasarkan perhitungan diatas, jadinya ip network = 0 dan ip broadcast = 63, pada block subnet 1, pada block subnet ke 2, akan di awali dengan ip network = 64 dan ip broadcast = 127 hasil pengurangan dari ip network di block ke 3, yaitu 128.\nip network | 0 | 64 | 128 \nip broadcast | 63 | 127 | .. (sampai batas 256)\n\nKemudian setelah itu kita putuskan ingin pakai block yang mana misalnya kalau pakai block ke 2, jadinya ip network akan diawali dengan 64, dan ip broadcast adalah 127, kemudian mencari ip range, rumusnya adalah ip network di tambah 1, dan ip broadcast di kurang 1, jadinya ip range nya adalah 127.16.10.65 - 127.16.10.126.\nDetailnya seperti ini.\ntotal ip = 64\nsubnetmask = 255.255.255.192\nip network = 172.16.10.64\nip broadcast = 172.16.10.127\nip range = 172.16.10.65 - 172.16.10.126\n\nOke, demikian cara sederhana untuk menentukan total ip address dengan efektif, atau biasa disingkat dengan istilah subnetting.\nSalam olahraga! dan juga lpg!","tags":"jaringan","media":"tulisan","thumbnail":null,"owner":"Adiatma Kamarudin","draft":false,"original_published_at":"2021-07-25T14:46:38","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2831,"title":"Sedikit tentang network dan ip address ","url":"https://www.evilfactorylabs.org/adiatma/sedikit-tentang-network-dan-ip-address-1lo4","body":"Oh iya tulisan ini akan membahas hal yang fundamental, atau basic di dunia network\nNetwork dalam bahasa Indonesia adalah jaringan, network di dalam dunia komputer bisa diartikan sebagai komputer - komputer yang saling terhubung dan berkomunikasi, berkirim data dari komputer satu ke komputer yang lainnya.\nDi dunia nyata manusia berkomunikasi, tentunya untuk bisa berkomunikasi butuh untuk tau dulu siapa lawan komunikasinya, biar komunikasinya tersambung, kalau gak tau lawan komunikasinya siapa, maka gak akan bisa komunikasi.\nSama seperti komputer yang butuh tanda pengenal untuk bisa berkomunikasi, nah tanda pengenal komputer di dunia network adalah ip address, nah ip address itu terdiri dari 32 bit angka biner yang dibagi dalam 4 byte, dan setiap byte terdiri dari 8 bit, dan setiap bitnya merepresentasikan bilangan desimal mulai dari 0 sampai 255.\nUmumnya kelompok ip address dibagi menjadi 2 bagian, ip private dan public. private biasanya terdapat di dalam sebuah kelompok kecil yang di sebut LAN (Local Area Network), dan ip public biasanya terdapat di dalam kelompok yang lebih besar atau global yang kita kenal sebagai internet.\nDi bahasan kali ini, kita hanya akan membahas lingkup LAN, yaitu sebuah kelompok local dalam area network, LAN adalah kelompok komputer yang berkomunikasi terbatas hanya diruang lingkupnya saja, dengan menggunakan ip private.\nNah ip private pada penggunaannya diatur oleh IANA (Internet Assigned Numbers Authority) sebuah organisasi yang mengatur penggunaan dan pengalokasian ip address di seluruh dunia, dalam sebuah dokumen RFC 1918, alokasi IPv4 (ip address versi 4) private diatur dengan angka desimal yang ada di bawah ini.\n# ip private\n10.0.0.0 - 10.255.255.255\n172.16.0.0 - 172.16.255.255\n192.168.0.0 - 192.168.255.255\n\nDiluar dari range angka diatas, bisa dikatakan sebagai ip public. aturan angka ip private diatas adalah absolute atau pasti dan perlu untuk di ingat biar mudah buat bedain dengan ip public.\nOk, selanjutnya kita akan bahas tentang prefix, pada bahasan sebelumnya harusnya kita sudah paham perbedaan IPv4 public dan private, sekarang kita akan bahas tentang prefix di dalam IPv4.\nPrefix adalah angka yang terdapat di depan alamat ip contohnya seperti ini, 192.168.1.1/24, nah yang ini /24 disebut sebagai prefix, prefix menjelaskan berapa banyak sebuah ip dalam sebuah network, jika bentuknya seperti ini 192.168.1.0/24 artinya ada sekitar 256 total ip, di dalam sebuah network tersebut. \n\nLoh angkanya darimana? kok bisa tau ada 256 ip, oke jadi ada hitungan dan rumusnya, rumusanya adalah 2 pangkat 32 - 24, hasilnya adalah 2 pangkat 8, yang jika dikalkulasikan akan menghasilkan angka 256. Oh iya angka 32 itu menggambarkan bit dari IPv4, dan 24 adalah prefixnya. \nPada penggunaannya sebenarnya hanya ada 254 komputer yang dapat menggunakan alamat ip tersebut, karena angka 256 akan dikurangi 2, yaitu ip network dan ip broadcast, sehingga menjadi 254, ip network adalah first ip, atau angka awal, dan ip broadcast adalah last ip atau angka akhir, dan keduanya tidak bisa digunakan oleh komputer yang terhubung dalam sebuah LAN (Local Area Network).\nSelanjutnya ip yang bisa digunakan disebut sebagai ip range, untuk menentukan ip range cukup ambil angka setelah ip network, dan sebelum ip broadcast, ditengah - tengah keduanya, contohnya 192.168.1.0/24 ip networknya adalah 192.168.1.0/24 dan ip broadcastnya adalah 192.168.1.255/24 dan ip range nya adalah 192.168.1.1/24 - 192.168.1.254/24.\nOke sampai disini kita sudah sedikit mengenal tentang ip address dan kawan - kawannya, untuk selanjutnya silahkan belajar lebih lanjut tentang subnetmask, block subnet, subnetting, switch dan router.\nTerimakasih semoga bermanfaat buat teman - teman yang lagi belajar tentang network.\nSalam olahraga!","tags":"ip,lan,jaringan","media":"tulisan","thumbnail":null,"owner":"Adiatma Kamarudin","draft":false,"original_published_at":"2021-07-25T10:48:21","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2832,"title":"Menjadikan Raspberry Pi sebagai router","url":"https://www.evilfactorylabs.org/faultable/menjadikan-raspberry-pi-sebagai-router-1j7c","body":"Tulisan ini aslinya diterbitkan di blog pribadi gue dengan judul yang sama yang bisa diakses disini.\nDan disini gue cuma ingin menguji pengalaman ketika melakukan cross-posting dari sumber luar ke situs ini.\nPada 15 Juni 2021 kemarin gue membeli router yang oke banget, doi menggunakan sistem operasi OpenWRT dan juga \"menjadikan\" privasi dan keamanan sebagai fitur utama (built-in support VPN & DNS encryption).\nPada dasarnya router hanyalah sesuatu yang bertugas untuk meneruskan & merutekan paket, dan sudah gue bahas sedikit di edgy's frontline newsletter yang di isu paling pertama. Lalu gue kepikiran gimana kalau Raspberry Pi gue dijadiin router? Spesifikasi Raspberry Pi gue gak terlalu sampah banget: armv7, 4 core CPU dan RAM 4G, dan gue ingin ber-eksplorasi lebih dalam ke network engineering.\nPercobaan pertama adalah dengan menjadikan Raspberry Pi (yang akan gue singkat menjadi raspi) bekerja sebagaimana router pada umumnya, yang berarti menjadi:\nDHCP server untuk memberikan alamat IP secara dinamis ke klien\nDNS (stub) resolver untuk menjawab DNS query oleh klien\nPenerus paket ke gateway (raspi gue terhubung ke WAN dan ada 2 router dibelakangnya)\nBerdasarkan 3 poin diatas, minimalnya ada 3 program yang harus berjalan di raspi gue:\nhostapd(8) untuk membuat Access Point (AP) biar devices gue bisa terhubung secara wireless\n\n\ndnsmasq(8) untuk memberikan alamat IP ke klien sekaligus untuk menjawab DNS queries juga\niptables(8) untuk mengatur paket yang masuk dan keluar. Biasanya ini sudah terpasang di sistem operasi\nDan seperti biasa, berikut ilustrasinya:\n Dibelakang 192.168.88.0/24 masih ada 1 router lagi sebelum nyambung langsung ke ISP, cuman yaudalaya\nSubnet yang gue pilih adalah 10.3.141.0/24 karena kenapa tidak dan gue tidak menggunakan dnsmasq(8) melainkan AdGuardHome karena dia juga bisa bertindak sebagai DHCP server. Serta, kalau gue pakai dnsmasq, dns queries diforward dari router ke... router. Jadi, kalau si 10.3.141.6 pakai nameserver router, si AdGuardHome taunya kalau yang melakukan query itu adalah si router itu sendiri bukan dari klien.\nNah, karena gue ingin tau juga siapa melakukan query kemana, jadi gue jadikan AdGuardHome sebagai DHCP server.\n Setting DHCP server gue\nOh iya, si raspi gue untuk yang ini menggunakan sistem operasi Raspian karena FreeBSD 13.0 untuk di armv7 tidak mendukung driver Wi-Fi yang digunakan di raspi gue.\nDriver untuk Wi-Fi gue adalah wlan0 dan punya static ip 10.3.141.1.\nGue kurang yakin apakah set gateway IP diatas menjadi 10.3.141.1 adalah hal yang benar atau salah, tapi bagaimanapun gue pakai iptables(8) juga untuk meneruskan paket dari wlan0 ke eth0.\nUntuk memulai, silahkan pasang AdGuardHome di raspi anda, kalau cara gue biasanya gini:\ncurl -JOL <link>\ntar -xzvf <nama>\nsudo mv AdGuardHome/AdGuardHome /usr/local/bin\nsudo /usr/local/bin/AdGuardHome -s install\nLalu akses port 3000, dan jalankan setup seperti biasa(next next next next).\nSekarang kita ke bagian setting AP menggunakan hostapd(8). Berkas konfigurasinya berada di /etc/hostapd/hostapd.conf dan konfigurasi minimalnya seperti ini:\nauth_algs=1\nwpa_key_mgmt=WPA-PSK\nbeacon_int=100\nssid=<nama_wifi>\nchannel=1\nhw_mode=g\nieee80211n=0\nwpa_passphrase=<password_wifi>\ninterface=wlan0\nwpa=2\nwpa_pairwise=CCMP\ncountry_code=ID\nignore_broadcast_ssid=0\n\nApakah gue tau semua maksud dari konfigurasi diatas? Tentu tidak, tapi bukankah kita memiliki mesin pencari? Anyway, intinya konfigurasi diatas untuk setting biar si raspi kita brodcast sinyal Wi-Fi yang menggunakan autentikasi via WPA-PSK.\nDan berikut tampilannya ketika sudah tersambung:\n Tentu saja signal stength excellent karena router gue disamping pisan\nKarena gue pakai AdGuardHome sebagai DHCP server, kita bisa tau perangkat apa aja yang tersambung berikut dengan MAC Address dan alamat IP nya:\n Daftar klien yang tersambung ke raspi gue\nGue pakai DHCP static lease karena 2 alasan:\nPengguna router ini umumnya cuma gue\nFitur \"Private Address\" nya iOS/iPadOS somehow ngeganggu, yang mana enggak expose hostname dan MAC Address asli perangkat gue (which is good) sedangkan gue butuh itu for the sake of a e s t h e t i c ✨ di dasbor AdGuardHome gue\nSetelah si raspi sudah bisa ngasih alamat IP & melakukan DNS query, sekarang waktunya membuatnya bisa meneruskan paket. Seharusnya ini udah berjalan out of the box but just in case enggak berjalan, bisa cek peraturan di Firewall ataupun memastikan bahwa nilai net.ipv4.ip_forward adalah 1 di /etc/sysctl.conf.\nMeskipun untuk mengetahui \"siapa mengontak siapa\" secara teknis sudah bisa dilakukan di level DNS, tapi gue butuh informasi \"siapa mengontak apa\".\nDan untuk mengetahui itu gue butuh bantuan ntopng(8) yang exactly bekerja sebagai \"traffic analyzer\". Pikirkan seperti top(1) tapi untuk jaringan.\nUntuk pemasangan ntopng(8) bisa diunduh melalui situsnya disini. Dan berikut salah satu tampilannya:\n Analisa trafik per aplikasi\nDisitu gue bisa mengetahui perangkat-perangkat gue ini menghubungi siapa aja (Amazon, Twitter, Spotify, dkk) dan apa aja (SSH, mDNS, DNS, dkk) plus dengan kategorinya (Tracker/Ads, Fun, Acceptable, dkk).\nKarena ntop adalah Traffic Analyzer, jadi dia pun menganalisa paket apa yang sekiranya dianggap berbahaya ataupun butuh perhatian. Misal ini, gue dapet alert kalau ada paket yang diduga \"malicious\" dengan kategori Suspicious DGA:\n gue rasa karena TLD nya .xyz\nKita bisa setting \"score anomaly\" sesuai dengan selera kita sendiri.\nProses instalasi ntopng(8) relatif sederhana, dan satu-satunya konfigurasi yang gue setting sendiri hanyalah agar listen port ke 3003.\nTentu saja tunnel!\nDNS queries yang ada di perangkat-perangkat gue dikirimkan melalui encrypted protocol yakni HTTPS, TLS, dan QUIC (yang dipilih randomly pakai RR) di AdGuardHome dengan edgyDNS sebagai upstream DNS.\nSetelah itu gue akan membuat IPv6 tunnel via TunnelBroker nya HE biar router gue mendukung IPv6.\nLalu gue buat traffic internet gue di proxy ke edgyPROXY dan menggunakan QUIC sebagai transport protocol.\nBerdasarkan keterbatasan kepengetahuan gue, jika melihat kebutuhan gue diatas, paket yang di-expose ke router dibelakang gue (dan router ISP tentunya) gue rasa bakal encrypted semua:\nDoH, DoT dan DoQ untuk DNS queries\nProxy over QUIC untuk Web traffic (goodbye SNI leak, I guess?)\nDan tentu saja akan terus gue monitor untuk mengetahui mana aja yang miss.\nDi setup seperti ini gue rasa gue belum butuh full tunnel via VPN.\nPertama karena gue bisa kontrol secara penuh untuk mengatur DNS dan HTTP traffic dan yang kedua karena bisa gue kontrol, berarti gue bisa milih untuk pakai encrypted transport protocol hahaha.\nBeda ketika gue pakai routernya GL-inet yang memiliki spek yang minimum. Dia bisa enkripsi paket DNS (built-in support DoT via 1.1.1.1 nya Cloudflare dan NextDNS) tapi gak bisa buat tunnel HTTP packet melalui transport protocol yang aman.\nKalau gue lagi bekerja diluar rumah (fyi gue udah ~2 minggu gak keluar rumah, dan itu sebuah prestasi untuk gue haha) tentu gue akan pakai si router GL-inet karena portable dan juga tunnel ke VPN server gue selalu tersambung.\nJadi gue gak perlu cabut-pasang si router itu lagi ketika keluar rumah sambil membiarkan si raspi gak mendapatkan akses ke internet hahaha.\nBecause why not?\nBecause we can?\nAnything!\nSederhananya, apa yang bisa gue lihat adalah apa yang bisa dilihat oleh siapapun juga (ISP misalnya) dan gue tidak ingin siapapun tersebut mengetahui beberapa hal yang memang tidak ingin gue bagikan (seperti paket untuk DNS & HTTP/S misalnya).\nIt's fine ISP mengetahui gue berkomunikasi dengan [2001:470:ed00::420]:6969 melalui protokol QUIC, tapi untuk urusan kalau ISP tau gue mengakses pornhub.com, sorry, big no.\nMungkin gue berlebihan, atau tingkat insecurity gue adalah paranoid.\nTapi at least gue sudah mengetahui threat model gue, dan pendekatan yang gue lakukan adalah hal-hal yang harus gue pilih untuk threat model yang sudah gue pikirkan tersebut.\nDan yang terakhir sebagai penutup, I'm just having fun!","tags":"raspberrypi,jaringan","media":"tulisan","thumbnail":null,"owner":"Rizaldy","draft":false,"original_published_at":"2021-07-25T09:19:55","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2823,"title":"Ngobrol Santai Ngebahas Lomba Cloud Computing SMK + Pengumuman Giveaway","url":"https://www.youtube.com/watch?v=GYUyAsASV_o","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-25T03:11:40","created_at":"2021-07-25T06:11:38.988033","updated_at":"2021-07-25T06:11:38.988033","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2833,"title":"Tentang menulis tulisan teknis","url":"https://www.evilfactorylabs.org/faultable/tentang-menulis-tulisan-teknis-18g5","body":"Halo,\nPerkenalkan gue @faultable\n dan di komunitas ini gue akan mencoba membantu untuk menuntun rekan komunitas sekalian untuk dapat berbagi pengetahuan dan pengalaman yang dimiliki, menggunakan media tulisan.\nKetika membuat tulisan tidak jarang ada pertanyaan \"Gue nulis tentang ini layak untuk dibagikan gak, ya? yang seringkali ditanyakan kepada diri sendiri (yang mungkin karena memiliki keraguan) dan jika misalnya gue boleh menjawab, jawabannya adalah: Hell yes.\nBerbagi adalah tentang \"pemindahan\" informasi dari pemberi ke penerima. Tugas paling berat dari berbagi adalah memastikan bahwa si penerima dapat menerima informasi dengan baik; jelas, dan yang paling penting: sesuai harapan.\nKabar buruknya, setiap orang memiliki cara menerima informasi yang berbeda-beda. Mungkin beberapa ada yang lebih suka dengan yang singkat-jelas-padat dan beberapa mungkin ke panjang-detail-mendasar. Namun kabar baiknya, kamu tidak perlu menganggap bahwa semua peserta adalah penontonmu, sebagaimana ketika menonton sebuah konser.\nNamun bagi yang baru memulai, bagian ini pun masih relatif sulit untuk dilewati. Banyak cara untuk menghadapinya, namun jika gue boleh memberikan saran: jadikanlah dirimu sebagai penonton VIP alias kamu menulis untuk dirimu sendiri yang mana memindahkan informasi dari yang ada dipikiranmu ke sebuah media dalam bentuk tulisan.\nKarena kamu yang paling mengetahui & mengerti dirimu sendiri dan dirimu yang lain sedang duduk menunggu pertujukanmu di kursi VIP, so, do your best.\nBaiklah, jika kamu sudah memiliki alasan mengapa ingin berbagi dalam bentuk tulisan dan sudah memiliki energi untuk melakukannya, luangkan waktu 5 menit kedepan terlebih dahulu untuk menghindari kehilangan arah karena gue ingin berbagi peta yang biasa gue gunakan ketika membuat sebuah tulisan.\nSederhananya, ini adalah tentang \"apa yang ingin lo bagikan?\" secara umum. Ingin menjelaskan Y dengan bahasa dan gayamu sendiri? Ingin membagikan pengalamanmu terkait X? Ingin memberikan pendapat terkait mengapa X dan bukan Y? \nGue ada 3 contoh tulisan yang pernah gue terbitkan di blog pribadi terkait 3 hal diatas:\nMenjadikan Raspberry Pi sebagai router, sudah banyak artikel di internet tentang membuat router menggunakan Raspberry Pi, dan gue ingin memastikan diri gue bahwa gue memahami konsep router secara high-level seperti dari DHCP sampai ke netfilter, menggunakan bahasa, gaya, dan tools yang cocok untuk gue sendiri\nApakah saya butuh CDN?, ini pun pastinya sudah banyak artikel yang membahas tentang ini di internet yang menggunakan judul yang cta-able yang diterbitkan oleh penyedia web hosting ataupun CDN (yang besar kemungkinan jawabannya adalah \"yes\"). Ditulisan tersebut, gue mencoba berbagi pengalaman secara netral sebagai seorang operator yang menjalankan layanan di internet.\nApa & Mengapa menggunakan Tailscale, ditulisan ini meskipun gue tidak menjelaskan secara eksplisit alternatif yang dibandingkan, setidaknya semoga dapat memberikan sedikit gambaran terkait adanya sebuah perbandingan.\nMenentukan maksud di awal dapat membantu kita (sebagai pemberi informasi) untuk tetap berada di konteks, seperti kita tidak perlu menjelaskan mengapa typeface di logo Nginx tidak menggunakan Helvetica ketika sedang berbagi tentang \"menangani 1000 permintaan per-detik menggunakan Nginx dan Blockchain\".\nJika kita sudah menentukan maksud dari apa yang ingin kita bagikan, let's move off.\nJudul memang penting, namun yang gue yakin, tidak sepenting itu.\nGue yakin pasti ada yang membaca tulisan ini sekalipun judulnya adalah HeLL0 w0Rld ¯\\(ツ)/¯ DCLXVI yang hanya tuhan dan @ri7nz\n yang mengerti maksudnya, anyway.\nMenentukan judul berarti kita memberikan gambaran secara singkat tentang pemeran utama yang ada. Apakah itu Nginx? Apakah itu TypeScript? Apakah itu GCP? Apakah itu HeLL0 w0Rld ¯\\(ツ)/¯ DCLXVI????\nSeringkali kita tertarik ketika melihat ada kata kunci yang ada di sebuah judul (citation needed, GFY HN readers!) seperti jika kita tertarik dengan Postgres, tulisan apapun selagi membahas tentang Postgres, kemungkinan besar akan kita kunjungi.\nDan gue secara pribadi sangat membenci judul yang bersifat click-bait sekaligus membenci judul yang terlihat membosankan. Seperti, daripada menentukan tulisan yang berjudul \"Membuat aplikasi Android menggunakan React Native\" gue lebih suka dengan judul \"Membuat dating app menggunakan Kotlin\".\nUmmm sorry maksud gue \"Membuat dating app menggunakan React Native\" ketika menjadikan \"React Native\" sebagai pemeran utama dan bukan si \"Android\" nya.\nSebagian orang percaya bahwa jika konten adalah raja maka judul adalah ratunya. Yes, but no. Gue termasuk orang yang percaya bahwa \"distribusi\" adalah ratunya, dan distribusi tidak selalu tentang SeaRcH eNginE OptiMization.\nSebagai kesimpulan, kamu bisa melewati terlebih dahulu penentuan judul ini ketika kamu sudah benar-benar mengetahui apa yang ingin kamu bagikan, sehingga kamu mungkin dapat menentukan judul yang 4 sehat 5 sempurna.\nNamun jika belum, kamu bisa menentukan judul sesuka hatimu saja. Masih ingat kan jika dirimu sendirilah si penonton spesial tersebut?\nGue tipe orang yang praktikal, dan tidak menempuh pendidikan formal terkait sastra. Dalam menulis, gue selalu memilih kata yang biasa gue gunakan di dunia nyata, dalam komunikasi verbal.\noke tapi dengan sedikit saringan sejujurnya karena mulut gue sedikit kotor\nGue secara pribadi dalam menggunakan bahasa, memilah kata, dan menentukan tanda baca, sejujurnya menggunakan prinsip sakumaha aing weh alias sesuka gue. Gue menggunakan bahasa yang benar-benar gue pahami, memilih kata yang benar-benar nyaman untuk gue, dan menentukan tanda baca yang sekiranya relevan sehingga gue bisa memberikan instruksi secara implisit kepada pembaca kapan harus terus melanjutkan dan kapan harus berhenti berharap dan mundur.\nKarena yang gue yakin, gue bukan sedang membuat paper ataupun menyusun tesis yang mungkin harus menggunakan EYD yang benar dan bahasa yang baik. Gue selalu menganggap bahwa berbagi dalam bentuk tulisan ini seperti sedang mengobrol dengan orang lain (atau diri sendiri lebih tepatnya) yang mana menggunakan bahasa sehari-hari yang mudah diterima & dimengerti.\nTentu ini bukanlah praktik terbaik, dan gue hanya memberikan sedikit pedoman.\nKarena kesempurnaan yang ada di dunia ini hanyalah ketidaksempurnaan (citation needed!!!).\nDalam konteks menulis, terkadang kita terbunuh oleh asumsi-asumsi yang salahsatunya menyebabkan tulisan tersebut hanya sampai di status draft. Entah sebuah perasaan bahwa tulisanmu kurang jelas, sebuah pemikiran bahwa tulisanmu terlalu singkat, sebuah bisikan bahwa topik pembahasanmu kurang menarik, apapun.\nMantranya untuk menepis asumsi-asumsi tersebut gue rasa satu: persetan.\nYang gue yakini, manusia selalu tumbuh; berkembang dan belajar. Dan juga, pasti pernah membuat sebuah kesalahan.\nAsumsi-asumsi yang ada dipikiran lo tersebut gue rasa hal yang wajar karena bukankah kita cenderung khawatir terhadap apapun yang bersifat ketidakpastian?\nKabar baiknya, sesuatu yang paling pasti di dunia ini hanyalah ketidakpastian, klo menurut orang random bernama Albert Einstein. Yang berarti, seharusnya tidak ada yang pasti di dunia ini.\nJadi, ya, persetan dengan asumsi. Kamu tidak perlu menjadi data-driven untuk menentukan hal yang ingin dibagikan dengan cara riset pasar; menganalisa semantik penulisan, ataupun mengalanisa terkait pemilihan topik yang ingin kamu bagikan.\nCukup bagikan. Setiap penampilan pasti memiliki penontonnya masing-masing.\nIni yang terakhir, just let it flow.\nDan yang paling penting, gue rasa, jangan jadikan aktivitas berbagi dalam bentuk tulisan ini menjadi aktivitas yang menyebalkan.\nJika dirasa seperti itu, mungkin bisa coba untuk dibiasakan dulu. Jika masih, mungkin tulisan bukanlah media yang cocok untukmu.\nSetiap kali gue menerbitkan tulisan, perasaan yang gue rasakan adalah bahagia, termasuk ketika masih dalam proses menulis tersebut.\nTidak jarang gue menyisipkan sedikit lelucon untuk lebih merenyahkan suasana yang gue yakini lelucon tersebut bersifat lucu (atau setidaknya lucu dalam pikiran sendiri, kalau mengutip dari sang pengamat @ervan0707\n).\nApapun yang terjadi, biarkanlah terus mengalir. Seiring berjalan waktu, gue yakin kita akan memiliki topik yang sangat antusias untuk kita bagikan; kita akan mendapatkan pembaca yang tertarik dengan tulisan kita (terlepas tentang apa yang kita tulis), mendapatkan \"suara dan nada\" yang cocok dengan personalitas kita, dan akan mendapatkan timbal balik terkait apa yang kita lakukan (dalam bentuk apapun itu).\nYang pasti, teruslah berpraktek. Berlatih. Berkembang.\nDan yang paling penting, harus membahagiakan~\nGue mohon maaf jika tulisan ini tidak membahas terkait \"menulis tulisan teknis\" sebagaimana yang dijanjikan di judul ini.\nNamun yang menariknya, mungkin kamu masih terus membaca bahkan sampai di paragraf ini.\nSekali lagi, gue masih yakin kalau judul memang penting, namun tidak sepenting itu. Maksud gue dalam menerbitkan tulisan ini adalah untuk merangkul pembaca untuk mulai membagikan apapun yang ingin dibagikan dalam bentuk tulisan, di situs ini.\nJika maksud gue tersebut ternyata tidak sampai ke pemikiran pembaca alias menjadi salah paham, please let me know dan bisa pertimbangkan untuk menyuarakannya di kolom komentar dibawah.\nDan jika ternyata tidak menjadi kesalahpahaman, give me some love by clicking on one of the available reactions on the side (atau bisa dengan menuliskan komentar juga!).\nJika ada yang ingin ditanyakan; memberikan kritik/saran, juga bisa suarakan dikolom komentar, oke?\nSebagai penutup, semoga tulisan ini bisa menjadi salah satu batu loncatan pertama kamu dalam aktivitas berbagi dalam bentuk tulisan.\nJadi, gimana? Udah siap berbagi, ya?","tags":"meta","media":"tulisan","thumbnail":null,"owner":"Rizaldy","draft":false,"original_published_at":"2021-07-24T16:42:08","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2822,"title":"BELAJAR RESTFUL API (BAHASA INDONESIA)","url":"https://www.youtube.com/watch?v=9ed3b0tSRvI","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-24T05:00:04","created_at":"2021-07-24T06:11:54.423082","updated_at":"2021-07-24T06:11:54.423082","deleted_at":null,"source_id":61,"contributor":"pulodev"},{"id":2821,"title":"Pengumuman Giveaway + Ngomongin Apa Aja","url":"https://www.youtube.com/watch?v=NaIg02-6WjY","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-23T22:44:33","created_at":"2021-07-24T00:30:42.010488","updated_at":"2021-07-24T00:30:42.010488","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2834,"title":"Merangkul dan berkolaborasi","url":"https://www.evilfactorylabs.org/root/merangkul-dan-berkolaborasi-3mbb","body":"Halo warga internet,\nSudah lama kita tidak bersua di dunia maya.\nSejak hari pertama membuat grup \"evilfactorylabs\" di Telegram yang hanya beranggotakan @ri7nz\n dan @faultable\n, hal yang ingin kita lakukan adalah berbagi pengetahuan & pengalaman, terlepas dari latar belakang apalagi level pengalaman. evilfactorylabs sejak hari pertama menjadi \"grup elit\" yang kerjaannya shit posting & gosip, dan berbagi pengetahuan/pengalaman dalam bentuk tulisan hanyalah 20% dari surface nya saja.\nGovernance model? Tidak ada, I guess. Semua anggota bebas melakukan apa yang mereka inginkan, dan setiap anggota bisa memberikan bantuan secara sukarela jika ingin ataupun sanggup. Butuh VPS untuk belajar Kubernetes? Butuh akses ke GCP untuk belajar VPC? Butuh 100rb buat makan 2 hari karena telat gajian? Butuh badut untuk menghibur ketika sedih? Cukup tanyakan.\nJika flashback ke masa lalu, kita sempat pernah sempat melakukan \"recruitment\" untuk yang tertarik bergabung dengan grup elit ini. Syaratnya macam-macam & lumayan sulit, dari harus menyebutkan Pancasila sampai mengirim POST request ke suatu endpoint dengan payload tertentu. Sempat juga membuat CTF ala-ala untuk mereka yang gabut ketika 17an dan cuma mendapatkan saldo Gopay sebesar 66,666*2 IDR sebagai imbalan bagi yang berhasil menemukan bendera nya.\nSudah sekitar 2 tahun evilfactorylabs menjadi grup elit, yang pada dasarnya direksinya ada di 1 orang yang bisa dianggap sebagai diktator. Diktator tersebut merasa jika kondisi seperti itu bukanlah hal yang baik, terlebih untuk bisa berkolaborasi dengan anggota lain (ataupun komunitas lain) relatif sulit, karena sifat grup yang tertutup.\nPercobaan pertama adalah dengan membuat server Discord evilfactorylabs dibuka aksesnya ke publik, meskipun tidak ada yang menarik di server tersebut (sebenarnya sejauh ini server Discord tersebut hanya digunakan untuk alert ketika ada down or something interesting) namun melihat jumlah anggota yang ternyata tidak terlalu sedikit, sepertinya membuat evilfactorylabs menjadi grup publik (alias komunitas) adalah direksi yang benar dan tidak perlu membuat percobaan kedua.\nSo here we are.\nevilfactorylabs akan tetap menjadi sebuah perkumpulan yang mungkin sudah kalian tau, namun sekarang menjadi lebih terbuka.\nUntuk berkontribusi tidak perlu ribet-ribet harus dapet alamat email @evilfactory.id dulu untuk bisa masuk ke Ghost Dashboard, menulis tulisan (ataupun hanya sampai draft!), lalu menunggu ehm editor memangkas kata & menyetujui tulisan tersebut. Cukup buat akun disini, tulis, terbitkan lalu bagikan.\nDireksi seperti ini dipilih untuk bisa mewujudkan \"merangkul & berkolaborasi\" menjadi lebih efektif & efisien lagi. Kita tidak hanya berbagi, namun mengajak orang-orang untuk ingin berbagi juga. Namun kekurangannya satu: kita masih sulit untuk mengajak orang-orang yang ingin berbagi namun tidak bisa. Alasannya beragam, namun yang kita fokuskan adalah di medium.\nDan dengan menggunakan software yang digunakan oleh dev.to, semoga masalah tersebut dapat diselesaikan. Software tersebut adalah forem/selfhost dan yang paling kerennya, forem adalah singkatan untuk \"For empowering community\" yang sangat menggambarkan kebutuhan kita.\nUntuk saat ini belum ada proses onboarding yang sangat membantu, jadi, silahkan nikmati petualanganmu sendiri dulu!\nJika sudah lumayan familiar dengan dev.to dan tertarik ingin menulis disini (ataupun melakukan cross-post ke blog milikmu), you are very welcome!\nJust be nice.\nTerserah ingin menggunakan bahasa apapun (Indonesia, Inggris, Jaksel, Sunda, Jawa) selagi tidak menyinggung hal-hal terkait SARA (Suku, Agama, Ras, Antargolongan) yang bersifat menyerang apalagi merendahkan.\nModerasi akan ada untuk bisa membuat komunitas ini menjadi (dan tetap) sehat serta bersifat inklusif untuk semua orang dari berbagai kalangan. Sebisa mungkin tidak akan ada proses censorship, namun, kita tidak akan menyediakan tempat untuk yang sifatnya hate speech.\nAkan ada tulisan-tulisan menarik disini, jadi, pertimbangkan untuk bookmark situs ini dan buat akun disini untuk bisa berinteraksi dan menerbitkan tulisan disini!\nSee you very soon!","tags":"meta","media":"tulisan","thumbnail":null,"owner":"evilfactorylabs","draft":false,"original_published_at":"2021-07-23T09:55:55","created_at":"2021-07-28T06:13:01.584549","updated_at":"2021-07-28T06:13:01.584549","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2820,"title":"Automated Testing, Kunci Sukses DevOps","url":"https://anchor.fm/deep-tech/episodes/Automated-Testing--Kunci-Sukses-DevOps-e14sqeo","body":"Pada saat mengembangkan software, terkadang kita menemukan bug atau error. Nah, untuk meminimalisir bug, kita perlu untuk melakukan pengujian pada software terlebih dahulu. Ada dua cara untuk pengujian yaitu manual testing dan automated testing.Tapi kali ini kita akan membahas lebih detail tentang automated testing bersama Giovanni Sakti, co-founder Deep Tech Foundation.","tags":"","media":"podcast","thumbnail":null,"owner":"deep tech foundation","draft":false,"original_published_at":"2021-07-23T07:04:29","created_at":"2021-07-23T12:14:51.205287","updated_at":"2021-07-23T12:14:51.205287","deleted_at":null,"source_id":4,"contributor":"hilmanski"},{"id":2814,"title":"Design Pattern: Composite & Flyweight (Bahasa Indonesia) | CodingClass S1 ⦁ E6","url":"https://www.youtube.com/watch?v=YhPPR127h_M","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-23T02:19:59","created_at":"2021-07-22T00:33:10.564206","updated_at":"2021-07-22T00:33:10.564206","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2817,"title":"Menelurkan Talenta Digital bersama William Florance dari Program Bangkit - Episode Spesial","url":"https://anchor.fm/ceritanya-developer/episodes/Menelurkan-Talenta-Digital-bersama-William-Florance-dari-Program-Bangkit---Episode-Spesial-e14pdbb","body":"Di episode spesial kali ini kita duduk bareng dan mendengarkan cerita  dari William yang memulai Program Bangkit setahun yang lalu dan apa yang  melatarbelakangi program yang sangat menarik ini. Tahun kedua ini  Program Bangkit berhasil mendidik ribuan developer untuk menjadi Machine  Learning Engineer, Cloud Computing Engineer ataupun Mobile Developer  dengan kurikulum berstandar internasional.\n\n---\nDonasi dapat meningkatkan kualitas podcast ini:\nhttps://karyakarsa.com/rizafahmi/tip \nhttps://saweria.co/rizafahmi                      \nDiskusi lebih lanjut:\nhttps://discord.gg/TuKBcd3XSZ \n\n\nButuh merchandise untuk kenangan:\nhttps://www.ciptaloka.com/+rizafahmi/","tags":"","media":"podcast","thumbnail":null,"owner":"Riza Fahmi","draft":false,"original_published_at":"2021-07-22T12:00:00","created_at":"2021-07-22T12:14:50.389345","updated_at":"2021-07-22T12:14:50.389345","deleted_at":null,"source_id":3,"contributor":"rizafahmi"},{"id":2816,"title":"Design Pattern: Facade & Decorator Pattern - Part 2 (Bahasa Indonesia) | CodingClass S1 ⦁ E5","url":"https://www.youtube.com/watch?v=MLfwnWcs1ZI","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-22T06:00:07","created_at":"2021-07-22T06:13:04.880989","updated_at":"2021-07-22T06:13:04.880989","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2815,"title":"Design Pattern: Facade & Decorator Pattern - Part 1 (Bahasa Indonesia) | CodingClass S1 ⦁ E5","url":"https://www.youtube.com/watch?v=metYIcjQLls","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-21T22:29:58","created_at":"2021-07-22T00:33:10.564206","updated_at":"2021-07-22T00:33:10.564206","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2808,"title":"Eksplorasi Google API Gateway","url":"https://www.youtube.com/watch?v=EM1Ky3TG0VU","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-21T03:35:35","created_at":"2021-07-20T12:15:01.662698","updated_at":"2021-07-20T12:15:01.662698","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2813,"title":"Eps. 54 - Kenapa Software Engineer Harus Melek Politik ","url":"https://anchor.fm/ngobrolinstartup/episodes/Eps--54---Kenapa-Software-Engineer-Harus-Melek-Politik-e14p3ij","body":"Kalian software engineer dan selama ini gak peduli dengan situasi politik karena merasa hidup kalian gak terpengaruh oleh politik? Coba pikir lagi. Kalau gak paham kenapa, yuk simak obrolan gw bareng Iqbal kenapa software engineer paling gak mesti melek politik.\n\n--- \n\nSend in a voice message: https://anchor.fm/ngobrolinstartup/message\nSupport this podcast: https://anchor.fm/ngobrolinstartup/support","tags":"","media":"podcast","thumbnail":null,"owner":"Imre Nagi","draft":false,"original_published_at":"2021-07-21T02:51:53","created_at":"2021-07-21T06:12:33.433749","updated_at":"2021-07-21T06:12:33.433749","deleted_at":null,"source_id":30,"contributor":"imrenagi"},{"id":2812,"title":"Alesan Kenapa Software Engineer Harus Melek Politik ft. Iqbal Farabi","url":"https://www.youtube.com/watch?v=viao8JiIt9A","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-07-21T02:51:35","created_at":"2021-07-21T06:12:16.560474","updated_at":"2021-07-21T06:12:16.560474","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2809,"title":"Monitoring Aplikasi REST API Golang dengan Elastic APM Service","url":"https://hellodit.medium.com/monitoring-aplikasi-rest-api-golang-dengan-elastic-apm-service-80505cfc70bb?source=rss-bec8db944a8e------2","body":null,"tags":"rest-api,coding,golang,elasticsearch","media":"tulisan","thumbnail":null,"owner":"Asdita Prasetya","draft":false,"original_published_at":"2021-07-20T08:06:30","created_at":"2021-07-20T12:15:18.879836","updated_at":"2021-07-20T12:15:18.879836","deleted_at":null,"source_id":51,"contributor":"hellodit"},{"id":2807,"title":"Laravel (7.x): Firebase Authentication with Email and Password","url":"https://www.youtube.com/watch?v=NKbvnOy5_wg","body":"Semua link saya sertakan di dalam deskripsi ini. \nMohon maaf jika ada kesalahan, semoga tutorial ini bermanfaat 👍🏽\n\n----------------------\nRepository: https://github.com/naufalist/larabase\nLaravel Docs: https://laravel.com/docs/7.x/\nFirebase Admin SDK PHP: https://firebase-php.readthedocs.io/en/5.x/\n\nLink sosial media, bisa dicek di sini: https://naufalist.com\n\nTerima kasih.","tags":"laravel, firebase, auth, laravel firebase auth","media":"video","thumbnail":"https://i.ytimg.com/vi/NKbvnOy5_wg/hqdefault.jpg","owner":"YouTube","draft":false,"original_published_at":"2021-07-20T00:00:00","created_at":"2021-07-20T09:13:08.822376","updated_at":"2021-07-20T09:13:08.822376","deleted_at":null,"source_id":null,"contributor":"naufalist"},{"id":2805,"title":"Mengelola Multi Bahasa Pemrograman Google Cloud Function dengan TypeScript dan Pulumi","url":"https://doni.dev/mengelola-multi-bahasa-pemrograman-google-cloud-function-dengan-typescript-dan-pulumi","body":"Saat ini kita ketahui untuk men-deploy sebuah aplikasi itu sangat mudah. Bahkan hanya dengan seorang diri kalian bisa membuat sebuah produk yang menghasilkan cuan. Tak peduli dengan bahasa apapun yang dipakai, berbagai macam platform sudah tersedia untuk kita gunakan. Saya masih ingat dulu memegang sebuah baremetal server harus menggotongnya ke dalam data center, memasang sistem operasinya, membuat jaringannya, kedinginan di dalam ruangan 😂, dan akhirnya baru kita bisa pakai untuk persiapan men-deploy sebuah aplikasi. Sebuah progress teknologi yang dapat Saya rasakan\nInfrastruktur sebagai kode\nKalian bisa bikin infrastrukture pake kode? Yap! kalian bisa membuat dan mengelola  sebuah infrastruktur melalui sebuah konfigurasi maupun bahasa pemrograman yang dipilih. Daripada kita harus mengkonfigurasi perangkat keras fisik atau alat konfigurasi interaktif di level sistem operasi.\nKebutuhan Infrastruktur sebagai kode ini bervariasi untuk setiap orang atau perusahaan. Jadi mungkin kalian tidak / belum membutuhkannya saat ini. Menurut saya kasus terbaik dalam penggunaan infrastruktur sebagai kode adalah aplikasi / proyek yang membutuhkan beberapa fitur dari penyedia komputasi awan misalkan kebutuhan database, data analytics, backend deployment, frontend deployment, function as a service dalam waktu yang bersamaan. \nHal ini membuat proses pemasangan, pengembangan, dan deployment bisa di dalam satu kode repository yang sama tanpa harus memisahkan operasional dan pengembangan. Pada akhirnya kita tidak perlu selalu membuka konsol awan untuk setiap kali melakukan sebuah pengecekan.\nMemperkenalkan Pulumi\nPulumi adalah sebuah Infrastruktur Modern sebagai kode untuk pengembang dan tim infrastruktur. Mereka membuat tujuan Cloud Engineering bisa dipahami untuk semua kalangan. Kita bisa mempraktikan Software Engineering seperti CI/CD, unit testing untuk menvalidasi sumber daya yang akan kita deploy, dan masih banyak yang lainnya.\nSebelum memulai mari kita coba koneksikan Pulumi dan GCP dengan mengikuti dokumentasi berikut. Setelah kalian mengkonfigurasi semuanya, saatnya kita membuat sebuah proyek baru Pulumi dengan perintah. \n$ pulumi login --local // Opsional: Jika tidak ingin menggunakan pulumi platform\n$ mkdir gcp-ts-serverless && cd gcp-ts-serverless\n$ pulumi new gcp-typescript\n\nReferensi dalam pembuatan proyek dapat dilihat di dokumentasi berikut.\n\nMari kita tinjau beberapa file proyek yang dihasilkan:\nPulumi.yaml mendefinisikan sebuah proyek.\nPulumi.dev.yaml berisi konfigurasi untuk stack yang Kalian inisialisasi.\nindex.ts adalah program Pulumi yang mendefinisikan sumber daya  / infrastruktur. \nKemudian mari kita konfigurasi GCP proyek dan region kita\npulumi config set gcp:project <proyek-gcp-kalian>\npulumi config set gcp:region <region-gcp-kalian>\n\nMengelola Cloud Function yang ditulis dalam Go dan Python\nNah saatnya kita mencoba untuk mengelola Cloud Function yang ditulis dengan multi bahasa. Silahkan buat beberapa files sesuai di bawah ini. Kita akan menggunakan contoh Hello World Sederhana untuk kali ini.\ngcp-ts-serverless/go-function/main.go\npackage helloworld\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc Handler(w http.ResponseWriter, r *http.Request) {\n\n    w.Header().Set(\"Content-Type\", \"text/plain\")\n    fmt.Fprintf(w, \"Hello World!\")\n}\n\ngcp-ts-serverless/python-function/main.py\ndef handler(request): \n    headers = {\n        'Content-Type': 'text/plain'\n    }\n\n    return ('Hello World!', 200, headers)\n\ngcp-ts-serverless/index.ts\nimport { asset } from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\n\nconst bucket = new gcp.storage.Bucket(\"gcp-ts-serverless\");\n\n// Google Cloud Function  menggunakan Python\n\n// Mempersiapkan GCS untuk menyimpan kode\nconst bucketObjectPython = new gcp.storage.BucketObject(\"python-zip\", {\n  bucket: bucket.name,\n  source: new asset.AssetArchive({\n    \".\": new asset.FileArchive(\"./python-function\"),\n  }),\n});\n\n// Memebuat Service Cloud Function untuk Python\nconst functionPython = new gcp.cloudfunctions.Function(\"python-func\", {\n  sourceArchiveBucket: bucket.name,\n  runtime: \"python37\",\n  sourceArchiveObject: bucketObjectPython.name,\n  entryPoint: \"handler\",\n  triggerHttp: true,\n  availableMemoryMb: 128,\n});\n\n// Konfigurasi Cloud Function untuk akses, project, dan region\nconst pyInvoker = new gcp.cloudfunctions.FunctionIamMember(\"py-invoker\", {\n  project: functionPython.project,\n  region: functionPython.region,\n  cloudFunction: functionPython.name,\n  role: \"roles/cloudfunctions.invoker\",\n  member: \"allUsers\",\n});\n\nexport const pythonEndpoint = functionPython.httpsTriggerUrl;\n\n// Google Cloud Function menggunakan Go\n\n// Mempersiapkan GCS untuk menyimpan kode\nconst bucketObjectGo = new gcp.storage.BucketObject(\"go-zip\", {\n  bucket: bucket.name,\n  source: new asset.AssetArchive({\n    \".\": new asset.FileArchive(\"./go-function\"),\n  }),\n});\n\n// Memebuat Service Cloud Function untuk Go\nconst functionGo = new gcp.cloudfunctions.Function(\"go-func\", {\n  sourceArchiveBucket: bucket.name,\n  runtime: \"go111\",\n  sourceArchiveObject: bucketObjectGo.name,\n  entryPoint: \"Handler\",\n  triggerHttp: true,\n  availableMemoryMb: 128,\n});\n\n// Konfigurasi Cloud Function untuk akses, project, dan region\nconst goInvoker = new gcp.cloudfunctions.FunctionIamMember(\"go-invoker\", {\n  project: functionGo.project,\n  region: functionGo.region,\n  cloudFunction: functionGo.name,\n  role: \"roles/cloudfunctions.invoker\",\n  member: \"allUsers\",\n});\n\nexport const goEndpoint = functionGo.httpsTriggerUrl;\n\nBisa dilihat kita dapat mendefinisikan berbagai macam sumber daya yang dimiliki GCP dengan mudah seperti, Penyimpanan Obyek (Google Cloud Storage) untuk menyimpan kode kita, Function as a Service (Google Cloud Function) untuk menjalankan fungsi kita, dan IAM Identity Access Managment yang membatu mengkontrol hak akses dan keamanan sumber daya infrastruktur kita. Pengalaman pengembang yang intuitif membuat Pulumi sangat mudah digunakan tanpa harus belajar bahasa spesifik untuk konfigurasi infrastruktur. \nOh Iya! Pulumi juga mendukung berbagai macam vendor komputasi awan jadi jangan khawatir ketika kalian punya sumber daya selain GCP. Untuk referensi lengkap penggunaan Pulumi bisa diakses https://www.pulumi.com/docs/\nKemudian kita coba deploy dengan menggunakan\n$ pulumi up\nPreviewing changes:\n...\nPerforming changes:\n...\nResources:\n    + 8 created\n\nDuration: 3m23s\n\nOutputs:\n    goEndpoint    : \"https://<go-url-kalian>\"\n    pythonEndpoint: \"https://<python-url-kalian>\"\n\nUntuk melihat hasilnya\n$ curl https://<go-url-kalian>\n\"Hello World!\"\n$ curl https://<python-url-kalian>\n\"Hello World!\"\n\nJangan lupa untuk menghapus setelah selesai\n$ pulumi destroy\n\nCatatan Penutup\nTernyata untuk mengelola infrastruktur pada komputasi awan sangat mudah. Tidak hanya Pulumi, banyak penyedia IaC dari vendor komputasi awan maupun open source yang sudah banyak digunakan di lingkungan produksi.\nBahkan tidak hanya menggunakan TypeScript / JavaScript saja, SDK pada Pulumi menyediakan bahasa pemrograman lain seperti Python, Go, maupun .NET Core.\nKetika ada yang ingin ditanyakan / kesulitan bisa langsung tanyakan dengan mention twitter saya di twitter.com/rubiagatra.\nKode bisa teman - teman akses pada github.com/rubiagatra/tanpa-server.\nTerima kasih.","tags":"GCP,Python,Go Language,TypeScript,google cloud","media":"web","thumbnail":null,"owner":"Doni Rubiagatra","draft":false,"original_published_at":"2021-07-19T01:16:24","created_at":"2021-07-19T06:12:38.832259","updated_at":"2021-07-19T06:12:38.832259","deleted_at":null,"source_id":69,"contributor":"Doni Rubiagatra"},{"id":2804,"title":"Website Lemot, Mungkin Ini Bisa Membantu: Image-set","url":"https://ginseladipura.xyz/post/website-lemot-mungkin-ini-bisa-membantu-image-set","body":"Salah satu penyebab web lemot yang paling umum: besarnya ukuran file gambar yang harus dimuat ketika website tersebut diakses.","tags":"css","media":"web","thumbnail":"https://res.cloudinary.com/de2ofvts5/image/upload/v1624184772/blog/lucas-benjamin-wQLAGv4_OYs-unsplash_rqhjyu.jpg","owner":"Gin","draft":false,"original_published_at":"2021-07-18T05:14:56.39","created_at":"2021-07-18T05:15:12.228993","updated_at":"2021-07-18T05:15:12.228993","deleted_at":null,"source_id":null,"contributor":"Gin"}],"total":1321}
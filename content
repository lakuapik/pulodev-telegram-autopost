{"data":[{"id":2867,"title":"Netlify sebagai Pemendek Tautan","url":"https://opakholis.dev/blog/shortener","body":"Menjadikan Netlify Redirects sebagai layanan URL Shortener pribadi","tags":"netlify, shortener","media":"tulisan","thumbnail":"https://opakholis.dev/static/images/shortener/banner.jpg","owner":"Opa Kholis Majid","draft":false,"original_published_at":"2021-10-08T00:00:00","created_at":"2021-08-10T17:14:44.442527","updated_at":"2021-08-10T17:14:44.442527","deleted_at":null,"source_id":null,"contributor":"opxop"},{"id":2914,"title":"Automate Resizing Bulk Images Using Libvips","url":"https://www.evilfactorylabs.org/fahmifan/automate-resizing-bulk-images-using-libvips-54a5","body":"Original post: fahmifan.id/blog/automate-resizing-bulk-images-using-libvips\nWith the growing popularity of ShopeeFood, many restaurants were applying for partnership with them, included my relative's Padang restaurant. But, their registration was not easy. They need a photo for each menu to be in a format of 720x720 px. For a Padang restaurant with over 50 menus and unfortunately the restaurant's menu photos were in different sizes.  \nI was too lazy to resized them manually. At first, I search for a service that could resize an image. But they weren't able to resize so many images at once. So I thought to write a program to automate this.\nbimg.\nThe code was pretty simple, we only need to iterate all of the photos in a directory. Then, for each of photo, resize it into 720x720 px. But, because the photos are not all squares, we can't use the Resize method instead, we use ResizeAndCrop that will resize the photos into 720x720 px and crop it fill to center\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/h2non/bimg\"\n)\n\nvar root = \"/menu-photos\"\nvar outdir = \"/menu-photos/720x720\"\n\nfunc resize(filepath, filename string) error {\n    buf, err := bimg.Read(filepath)\n    if err != nil {\n        return err\n    }\n\n    img := bimg.NewImage(buf)\n    size, err := img.Size()\n    if err != nil {\n        return err\n    }\n\n    newImage, err := img.ResizeAndCrop(720, 720)\n    if err != nil {\n        return err\n    }\n\n    size, err = bimg.NewImage(newImage).Size()\n    if err != nil {\n        return err\n    }\n\n    if size.Width != 720 || size.Height != 720 {\n        fmt.Printf(\"wrong size: '%s' %vx%v\\n\", filename, size.Width, size.Height)\n    }\n\n    fmt.Printf(\"resize & crop: %s\\n\", filename)\n    return bimg.Write(path.Join(outdir, filename), newImage)\n}\n\nTo make the code faster, we can utilized goroutine. Here i spawned 4 goroutine that resize the images concurently.\ntype resizeJob struct {\n    FilePath string\n    FileName string\n}\n\nfunc main() {\n    jobChan := make(chan resizeJob, 4)\n\n    wg := &sync.WaitGroup{}\n    nworker := 4\n    // spawn workers\n    for i := 0; i < nworker; i++ {\n        wg.Add(1)\n        go worker(wg, jobChan)\n    }\n\n    err := filepath.Walk(root, func(path string, info fs.FileInfo, err error) error {\n        if info.IsDir() {\n            return nil\n        }\n        // enqueue jobs\n        jobChan <- resizeJob{FilePath: path, FileName: info.Name()}\n        return nil\n    })\n    close(jobChan)\n    if err != nil {\n        fmt.Fprintln(os.Stderr, err.Error())\n        return\n    }\n\n    // wait for workers to finished\n    wg.Wait()\n    fmt.Println(\"done\")\n}\n\nfunc worker(wg *sync.WaitGroup, jobChan chan resizeJob) {\n    defer wg.Done()\n    for file := range jobChan {\n        err := resize(file.FilePath, file.FileName)\n        if err != nil {\n            fmt.Fprintln(os.Stderr, err.Error())\n        }\n    }\n}\n\nCredits\nAngèle Kamp on Unsplash","tags":"livips,go,resize,image","media":"tulisan","thumbnail":null,"owner":"Fahmi Irfan","draft":false,"original_published_at":"2021-08-28T13:44:56","created_at":"2021-08-28T18:18:15.990317","updated_at":"2021-08-28T18:18:15.990317","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2912,"title":"#14: Ahmad Riza - Berkenalan Dengan Pemrogram Di Industri Minyak Bumi","url":"https://ujung.ee/eps-14-ahmad-riza-pemrogram-industri-perminyakan/","body":"Di episode ke-14, kali ini kami akan membahas soal pekerjaan pemrogram di industri yang nampak membosankan: industri perminyakan. Eits, tapi jangan salah, walaupun kesannya membosankan tapi ternyata pekerjaan pemrogram di sana seru lho. Tamu kami kali ini namanya Ahmad Riza, berkarir sebagai pemrogram di industri perminyakan sepanjang hidupnya. Semoga membuka wawasan baru untuk para pendengar Ujung ke Ujung.","tags":"","media":"podcast","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-28T10:00:00","created_at":"2021-08-28T06:18:45.194466","updated_at":"2021-08-28T06:18:45.194466","deleted_at":null,"source_id":24,"contributor":"naufaldi"},{"id":2911,"title":"[mks.py] Python Continuous Integration With Github Action","url":"https://www.youtube.com/watch?v=D2da7lMS7wE","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-28T03:33:29","created_at":"2021-08-28T06:18:38.794842","updated_at":"2021-08-28T06:18:38.794842","deleted_at":null,"source_id":28,"contributor":"oon"},{"id":2910,"title":"Troubleshooting Framework","url":"https://anchor.fm/deep-tech/episodes/Troubleshooting-Framework-e16eei2","body":"Setelah aplikasi live di production, maka cepat atau lambat developer pasti akan menemui production issues. Misalnya bug atau outage yang sangat mempengaruhi pelanggan, sehingga menyebabkan kerugiaan jutaan rupiah bagi perusahaan. \nMakanya penting banget bagi semua developer untuk memiliki kemampuan troubleshooting agar permasalahan di production bisa segera diatasi. Untuk itu, kita akan ngobrol-ngobrol dengan Giri Kuncoro, Senior System Engineer di Gojek agar kita bisa lebih paham nih tentang troubleshooting ini.","tags":"","media":"podcast","thumbnail":null,"owner":"deep tech foundation","draft":false,"original_published_at":"2021-08-27T08:02:06","created_at":"2021-08-27T12:25:34.528379","updated_at":"2021-08-27T12:25:34.528379","deleted_at":null,"source_id":4,"contributor":"hilmanski"},{"id":2913,"title":"2. Konversi Alpa dan Reduksi Beta | Kalkulus Lambda","url":"https://www.youtube.com/watch?v=ZIXy14Ym7k0","body":"Halo semua.Pada video kali ini menyampikan tentang konversi alpa dan reduksi beda dari ekspresi lambda.Konversi alpa melakukan perubahaan simbol variabel tan...","tags":"fungsional programming, kalkulus lambda","media":"video","thumbnail":"https://i.ytimg.com/vi/ZIXy14Ym7k0/maxresdefault.jpg","owner":"Idiosemantik","draft":false,"original_published_at":"2021-08-27T00:00:00","created_at":"2021-08-28T06:49:04.602377","updated_at":"2021-08-28T06:49:04.602377","deleted_at":null,"source_id":null,"contributor":"Robocosan"},{"id":2801,"title":"Belajar Html #1.Struktur Html","url":"https://tntteknologi.blogspot.com/2021/05/belajar-html-1struktur-html.html","body":"Belajar Html #1.Struktur dasar Html\n  \n\n\n  Assalamualaikum wr wb\n  Kembali lagi di tutorial Html untuk pemula, kali ini kita akan membahas   mengenai struktur dari Html, apa saja yang akan kita bahas, mari kita simak   berikut ini. \n\n\nStruktur dasar Html\n     Pada dasarnya struktur dasar html itu terdiri dari dua bagian   yakni bagian head dan body yg dibungkus antara tag html. \n  \n\n\nStruktur dasar html\n\n\n\n\n    Seperti gambar diatas. Bagian tag pada html mirip seperti sandwich dan   tag penutup pada html biasa ditandai dgn tanda slash \"/\" pada akhir tag nya..   lantas apa saja fungsi dari si tag head dan body ini? Untuk itu mari kita   simak uraian berikut ini. \nFungsi tag head\n  Secara umum tag <head> berfungsi untuk menampung metadata atau deskripsi   dari sebuah data, dan tag ini ditempatkan diantara tag <html> dan   <body> \n  Metadata ini bisa berupa data dari sebuah dokumen html yang berupa deskripsi   dokumen, definisi judul, karakter set, style halaman, keyword dan sebagainya. \n  Tag yang bisa menjadi element pada tag head\n\n  \n<title> wajib untuk setiap file html\n  \n<Style>\n  \n<base>\n  \n<link>\n  \n<meta>\n  \n<script>\n  \n<noscript>\n\nDefinisi tag title\n  Tag ini umumnya digunakan untuk memberi nama sebuah halaman pada tab di web   browser kalian, tag title hanya bisa diisi oleh teks saja tanpa disertai   gambar atau link didalamnya, tag ini diperlukan pada setiap file Html. \n  Element dari title ini sangat diperlukan untuk SEO (search engine   optimisation) karena digunakan dalam algoritma search engine. \n\n  Hal yang perlu diperhatikan dalam penulisan title\n  \n\n  Jangan membuat judul terlalu panjang lebih dari 60 karakter\n  \n                    \nseperti pada gambar di atas, judul yang terlalu panjang tidak baik untuk   sebuah tampilan web karena tidak semua isi judul tersebut ditampilkan dalam   tab browser anda maka dari itu usahakan lah membuat judul sesederhana mungkin   yang tidak terlalu panjang dan terlalu pendek. \n\n\n  Buatlah judul seakurat mungkin dengan isi web\n  \n                \n  Hal ini juga perlu diperhatikan apabila ingin membuat sebuah website. Pasalnya   tak sedikit user yang meninggalkan suatu website dikarenakan konten yang   kurang relevan dengan kebutuhan pembaca, so pastikan agar judul halaman mu   sesuai ya.. \n\n\n  Catatan :Tag title tidak bisa dibuat lebih dari satu tag dalam satu   dokumen. \n\n\nFungsi tag body\n   Fungsi dari tag <body> adalah untuk menampilkan isi   dari dokumen Html pada browser. Jika isi dari tag   <head> tidak ditampilkan. Maka tag body adalah kebalikannya. \n\n\n   Tag ini bisa menampung seluruh elemen yg ditampilkan pada browser   seperti paragraf, teks, gambar, link, list, tabel, dan lain-lain, perlu   diingat juga bahwa tag <body> hanya boleh ada satu disetiap file   Html. \n\n\n  \nArtikel terkait\n  \n    \n      \n        Html #0. pengenalan apa itu HTML      \n      \n        Belajar Css untuk pemula #0. pengenalan\n      \n    \n  \n\n\n  Nah mungkin itu saja pembahasan kita mengenai Struktur Html, mudah mudahan   bermanfaat untuk kalian yang lagi belajar tentang pemrograman web. Kami akan   terus update lagi perkembangan artikel ini jadi mohon maaf jika ada yang   kurang, Sekian, Wassalamu'alaikum wr wb.","tags":"[object Object],[object Object]","media":"web","thumbnail":null,"owner":"noreply@blogger.com (Cloudys Dev)","draft":false,"original_published_at":"2021-08-25T15:46:00","created_at":"2021-07-17T00:32:13.971247","updated_at":"2021-07-17T00:32:13.971247","deleted_at":null,"source_id":68,"contributor":"Cloudys dev"},{"id":2908,"title":"Konsep Pemrograman Fungsional dengan Elixir","url":"https://www.youtube.com/watch?v=xfveTGjyXFw","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-25T09:00:32","created_at":"2021-08-25T12:25:28.637268","updated_at":"2021-08-25T12:25:28.637268","deleted_at":null,"source_id":72,"contributor":"Riza Fahmi"},{"id":2907,"title":"Sinkronisasi VSCode biar bisa dipakai di mana aja. ","url":"https://www.evilfactorylabs.org/petruknisme/sinkronisasi-vscode-biar-bisa-dipakai-di-mana-aja-2enf","body":"Jadi gini, dulu sempet kepikiran apa vscode ini bisa dicopy ya ekstensinya atau dibackup gitu loh biar kalau pindah perangkat nggak diatur ulang. Nah, abis searching-searching nemu deh kalau ternyata vscode itu bisa sinkronisasi pengaturan, ekstensi dan sebagainya. \nBegini caranya, yang pertama klik Code -> Prefence -> Turn on Setting Sync\nTulisan ini pakai osx, jadi disesuaikan sama platform masing-masing ya untuk menu Sync Settings nya. Setau saya kalau di windows/linux itu File -> Preference.\n\nSehabis itu akan muncul welcome message dan pilihan-pilihan. Klik Sign in & turn on\n\nPilih metode sign in, kalau saya menggunakan github.\n\nVscode akan membuka jendela browser, ikuti perintah yang diberikan untuk authorize. \n\nKalau prosesnya berhasil dia bakal ada popup open link nya via vscode.\n\n\nNah, vscode udah tersinkronisasi nih. Keren kan!\n\n\nDengan gini, jadi mudah banget kalau pindah perangkat semuanya terhubung dengan baik. Yey!","tags":"development,vscode","media":"tulisan","thumbnail":null,"owner":"petruknisme","draft":false,"original_published_at":"2021-08-24T07:05:41","created_at":"2021-08-24T12:25:13.595302","updated_at":"2021-08-24T12:25:13.595302","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2905,"title":"Visualizing Monika Data with Prometheus and Grafana","url":"https://medium.com/hyperjump-tech/visualizing-monika-data-with-prometheus-and-grafana-bee8c6feb9d3?source=rss----fabfd42372dc---4","body":null,"tags":"monika,open-source,grafana,monitoring,prometheus","media":"tulisan","thumbnail":null,"owner":"Denny Pradipta","draft":false,"original_published_at":"2021-08-24T04:28:08","created_at":"2021-08-24T06:19:35.976941","updated_at":"2021-08-24T06:19:35.976941","deleted_at":null,"source_id":46,"contributor":"2co_p"},{"id":2906,"title":"Terima Kasih Tahun 2021","url":"https://rahmatagungjulians.tech//blog/terima-kasih-tahun-2021","body":"Semua hal mengenai apa yang saya pelajari dan saya dapatkan pada tahun 2021. Banyak sekali Teknonologi baru, tempat kursus dan saluran Youtube yang saya gunakan untuk belajar.","tags":"story","media":"web","thumbnail":null,"owner":"rahmatagungj@gmail.com (Rahmat Agung Julians)","draft":false,"original_published_at":"2021-08-24T00:00:00","created_at":"2021-08-24T12:25:13.059588","updated_at":"2021-08-24T12:25:13.059588","deleted_at":null,"source_id":73,"contributor":"Rahmat Agung Julians"},{"id":2904,"title":"The Fediverse Experience","url":"https://www.evilfactorylabs.org/sandycorzeta/the-fediverse-experience-5d9o","body":"Disclaimer\nTulisan ini sebelumnya aku tulis pada akun pribadi facebook sendiri beberapa bulan lalu. Berhubung aku sudah tidak lagi menggunakan facebook dan menghapus akunnya sejak Juni kemarin, jadi aku tulis ulang di platform ini.\nSebenarnya aku menulis ini sedang dalam keadaan mengantuk namun ingin kepala dan hati berbagi secara pribadi tentang pengalamanku menggunakan media sosial yang terdesentralisasi. Benar sekali, media sosial tersebut merupakan Fediverse. Apa itu Fediverse? Aku menyebutnya sebagai \"Dunia Federasi\". Wow, keren... seperti istilah yang ada di cerita-cerita sci-fi. Bukan begitu bodoh, itu aku menerjemahkan secara literal aja. Selengkapnya nanti aku jelaskan deh. Tapi, yang pertama aku ceritakan dulu bagaimana awal perkenalanku dengan fediverse.\nPada tahun sekitaran 2016 aku dulu sempat mencari media sosial alternatif yang memiliki kemiripan seperti twitter dan facebook. Disaat itu aku menemukan sebuah website yang memiliki domain bernama shitposter.club. Berhubung di tahun 2016-an tersebut aku sangat aktif sekali dan menggemari hal yang terkait shitposting dan meme, dari nama domain tersebut aku tertarik dan mencoba mendaftar. Sayangnya, disaat itu aku tidak aktif di situs tersebut dan mengabaikan akunku. Hingga pada akhirnya di akhir tahun 2020, aku mulai melirik kembali media sosial yang terdesentralisasi dan mulai sadar mengenai privasi digital. Sekitar Oktober 2020 aku mendaftar di mastodon.social untuk mengawali kembali dan mencoba mencari relasi baru selagi berhenti aktivitas dari facebook. Dalam satu bulan aku cukup mulai terbiasa dan mendapatkan relasi baru. Tapi aku di mastodon.social tidaklah begitu lama dan menghapus akunku sampai aku menemukan misskey.io dan berakhir menjadi pengguna disana hingga saat ini.\nTerima kasih sudah mendengarkan perkenalanku dengan fediverse. Jadi, sebenarnya Fediverse itu apa sih? Fediverse merupakan gabungan dua kata dari Federation dan Universe yang dapat diartikan sebagai semesta dari kumpulan berbagai federasi. Umumnya banyak pengguna dari fediverse menyebutnya sebagai fedi. Fediverse sendiri dibangun dari konsep desentralisasi dimana sebuah layanan itu tidak terpusat ke dalam satu tempat/pemilik/platform (seperti Facebook, Twitter, Google, etc) dan setiap orang memiliki hak serta kemampuan untuk menyediakan, memiliki ataupun berkontribusi pada layanan tersebut.\nKarena tidak berpusat di dalam satu tempat ini, fediverse memiliki banyak ribuan server tersedia yang umumnya disebut instance dan itu terhubung semuanya bersama dalam satu standar protokol resmi dari W3C yang dinamakan ActivityPub. Keunggulan lain dari fediverse sendiri ialah tidak rentan terhadap sensor karena apabila kamu diblokir atau di*ban* dari satu instance, kamu cukup pindah ke instance lain. Selain itu, keuntungan dari desentralisasi kamu dapat memilih lingkungan instance yang ingin kamu ikuti. Setiap instance memiliki peraturan berbeda, ada yang mempromosikan bebas bicara tanpa rasa baper ataupun memilih untuk membatasi yang membentuk lingkungan safe-space.\nBerkomunikasi di fediverse tidaklah berbeda seperti berkomunikasi di media sosial pada umumnya, malahan memiliki keuntungan yang tidak dimiliki media sosial yang tersentralisasi. Apakah kamu pernah membayangkan jika postingan Facebook kamu dikomentari oleh seseorang dari Twitter melalui situs Twitter langsung tanpa harus dia mendaftar ke Facebook?. Dalam fediverse, kita bisa melakukan itu dan semua berkat standar protokol ActivityPub. Aku akan sedikit memberi penjelasannya menggunakan analogi dimana protokol ActivityPub adalah seperti email. Sebuah email umumnya disediakan oleh banyak penyedia layanan seperti Gmail, Yahoo, Protonmail, Tutanota, dll. Dari banyaknya penyedia layanan tersebut kita bisa berkomunikasi apabila kita mengetahui domain beserta username yang terdaftar.\nSebagai contoh, A memiliki email beralamat aku@gmail.com dan B memiliki email beralamat dia@yahoo.com. Keduanya dapat berkomunikasi mengirim surat satu sama lain selama mengetahui domain beserta username mereka masing-masing. Pada fediverse, ActivityPub-lah yang menggantikan peran email ini. Gmail, Yahoo, dan Protonmail dalam fediverse diibaratkan sebagai layanan server/platform yang mendukung protokol ActivityPub. Platform tersebut diantaranya seperti Mastodon, Pleroma, Misskey, Pixelfed, dll. Sama seperti email, berkat ActivityPub meskipun kita berbeda instance maupun platform, kita masih tetap dapat berkomunikasi seperti di media sosial umumnya, baik itu membaca status, follow, mention, direct messages dll. Semisal, bila aku yang terdaftar di instance misskey.io dengan username sandycorzeta, orang lain dapat mencari, mention atau melihat profilku di instance mereka sendiri dengan mengetikkan @sandycorzeta@misskey.io di pencarian atau beranda mereka tanpa harus repot-repot pergi dan mendaftar ke website instance dimana aku terdaftar.\nSekarang, kalian sudah tahu apa itu fediverse dan bagaimana cara bekerjanya. Lalu, apa yang menarik dan bisa diambil dari pengalamanku berkelana di fediverse ini?. Dapat kukatakan kalau di fediverse, semua hal yang terjadi sangatlah begitu personal dan lebih terfokus kepada komunitas dimana kita terdaftarkan. Sempat aku mengibaratkan bahwa instance kecil seperti misskey.io yang menampungi 5000 user sendiri adalah sebuah kota kecil. Sedangkan instance besar seperti mastodon.social yang menampung 500rb lebih user adalah sebuah negara. Bagusnya dengan fediverse ini bagiku adalah aku dapat berkomunikasi dengan orang di luar instance tanpa harus keluar dari instanceku sendiri. Selain itu, tidak adanya algoritma highlight ataupun yg memanipulasi linimasa di beranda juga merupakan kelegaan tersendiri. Karena dengan begitu aku tidak perlu lagi capek memikirkan hal yang sudah terlewat dan belum tentu ada benefitnya bagiku.\nHal lain yang memberikanku pengalaman di fediverse ialah konsep \"dimana bumi dipijak disitu langit dijunjung\" yang cukup jelas dapat dilihat di berbagai instance yang ada. Adapun instance yang menampung pengguna dengan kebebasan berpendapat tanpa batas asal kamu mampu mempertanggung jawabkan pendapatmu. Beberapa seperti contohnya neckberd.xyz, poa.st, dan shitposter.club. Atau yang berbanding terbalik dimana instance yang menampung dan memberikan safe-space sembari memblokir sebagian instance tadi dengan membuat sebuah daftar yg disebut FediBlock. Selain itu, terdapat instance yang menyediakan topik tematik terbatas pada kegiatan, seperti mastodon.art (seni), mastodon.technology (teknologi), scholar.social (akademisi/riset), atau ihatebeinga.live (sadposting). Semuanya tersedia dan aku tinggal memilih mana yang diinginkan. Untungnya aku lebih memilih kepada instance yang umum dan dominan lebih banyak kepada pengguna orang jepangnya yaitu misskey.io. Alasan mengapa aku memilih karena aku menyukai layar antarmukanya yang modern dan kamu bisa memberi custom emoji react ke status orang lain (hanya Pleroma dan Misskey saja yg support fitur ini sekarang). Selain itu juga beberapa hari lalu aku menyempatkan untuk menerjemahkan antarmuka Misskey ke Bahasa Indonesia melalui repo Crowdin mereka. Jadi, ya setidaknya itu saja kontribusi yang bisa aku berikan.\nWaduh malah kemana mana ini ceritanya. Tapi tetep anyway, aku bakal menetap di fediverse untuk waktu kedepannya dan memungkinkan untuk membuat akun facebook-ku disini jadi zombie (now its dead, lmao). Dilain hal, semenjak banyak kejadian pencurian data dan kebijakan privasi yang makin menguntungkan korporat, aku makin meyakinkan diri untuk tidak lagi sembarangan menggunakan layanan yang proprietary. Karena itu juga, secara perlahan aku mulai menggunakan layanan ataupun aplikasi yang sebisa mungkin bebas (free as in freedom) bukan gratis (free as in beer). Karena gratis belum tentu bebas.\nYah, begitulah pengalamanku dengan fediverse selama kurang lebih hampir setengah tahun ini. Jikalau kalian punya pertanyaan silahkan komentar, atau bila berkenan kalian bagikan postingan ini untuk menambahkan awareness bagi yang tertarik untuk menyusuri fediverse. Aku juga bakal kasih tautan-tautan yang menarik dibaca tentang fediverse pada berakhirnya postingan ini.\nOh ya lupa... mungkin kalo aku ada biaya dan waktu lebih nantinya, aku bakal buka instance Misskey (atau mungkin Pleroma) lokal khusus Indonesia. Berhubung warga Indonesia masih banyak terpencar di fediverse (baru nemu beberapa pengguna yang bisa diitung jari) dan belum ada instance lokal sama sekali, jadi aku berinisiatif untuk melakukan itu.\nTerima kasih sudah membaca tulisanku, kawan. Mungkin di tulisan berikutnya akan aku kasih kurasi instance fediverse yg menarik untuk diikuti ya atau pengenalan beberapa plaform Fediverse dan fitur-fiturnya seperti Mastodon, Pleroma atau Misskey. Berhubung sudah gak kuat ngelanjutin nulisnya, sampai disini dulu ya. Sampai ketemu di fediverse ya!! ❤️😘\n👋\nTautan menarik :\nhttps://fediverse.party/en/fediverse (Tentang Fediverse)\nhttps://fediverse.party/en/portal/servers (Daftar kurasi instance server fediverse)\nhttps://blog.soykaf.com/post/how-federation-works/ (Cara kerja federasi di Fediverse)\nhttps://www.youtube.com/watch?v=S57uhCQBEk0 (Mastodon & Fediverse Explained)\nhttps://www.youtube.com/watch?v=yZoASOyfvGQ (Decentralized Social Networks vs Trolls)","tags":"indieweb,fediverse,socialmedia","media":"tulisan","thumbnail":null,"owner":"Sandy Corzeta","draft":false,"original_published_at":"2021-08-23T12:48:08","created_at":"2021-08-23T18:20:47.264463","updated_at":"2021-08-23T18:20:47.264463","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2903,"title":"Tentang Saya 1 Tahun Bersama Progate","url":"https://rahmatagungjulians.tech//blog/progate","body":"Kemarilah, saya ceritakan bagaimana cara saya belajar cepat hingga menjadi mahir dalam programming.","tags":"review","media":"web","thumbnail":null,"owner":"rahmatagungj@gmail.com (Rahmat Agung Julians)","draft":false,"original_published_at":"2021-08-23T00:00:00","created_at":"2021-08-23T18:20:42.335451","updated_at":"2021-08-23T18:20:42.335451","deleted_at":null,"source_id":73,"contributor":"Rahmat Agung Julians"},{"id":2901,"title":"Lesson Learned Menulis Websocket dengan Gorilla dan Go #Techtalk","url":"https://www.youtube.com/watch?v=MjvaWbwsN0Y","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-22T04:16:29","created_at":"2021-08-20T18:19:26.444787","updated_at":"2021-08-20T18:19:26.444787","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2900,"title":"Fauzan Emmerling, Kembangkan Sayap Ke Dubai Saat Pandemi","url":"https://anchor.fm/ceritanya-developer/episodes/Fauzan-Emmerling--Kembangkan-Sayap-Ke-Dubai-Saat-Pandemi-e166ndk","body":"Banyak orang yang merasa stuck saat pandemi. Baik dalam segi karir, keuangan atau sosial. Namun Fauzan Emmerling bisa membuktikan, bahwa pandemi bukan halangan untuk mengembangkan sayap ke luar negeri. \n\n\"Yang paling berat dari pindah ke luar negeri adalah mental. Karena sebetulnya engineer Indonesia itu skillnya sudah setara di luar negeri. Penghambat paling besar itu ya, kitanya nggak mau keluar dari zona nyaman atau faktor keluarga.\" ujar Senior Engineer Manager di noon e-commerce tersebut.\n\nBagaimana cerita Fauzan bisa mendapatkan tawaran kerja saat pandemi dan tips bersaing di dunia internasional? Dengerin selengkapnya di Ceritanya Developer.","tags":"","media":"podcast","thumbnail":null,"owner":"Riza Fahmi","draft":false,"original_published_at":"2021-08-20T11:25:29","created_at":"2021-08-20T12:26:37.772372","updated_at":"2021-08-20T12:26:37.772372","deleted_at":null,"source_id":3,"contributor":"rizafahmi"},{"id":2899,"title":"How to get notified when your website down","url":"https://syofyanzuhad.medium.com/how-to-get-notified-when-your-website-down-52b46399d54b?source=rss-d7cef7a111e9------2","body":null,"tags":"notification-system,monitoring,devops,website,web-development","media":"tulisan","thumbnail":null,"owner":"Syofyan Zuhad","draft":false,"original_published_at":"2021-08-20T07:52:10","created_at":"2021-08-20T12:26:19.801529","updated_at":"2021-08-20T12:26:19.801529","deleted_at":null,"source_id":74,"contributor":"Syofyan Zuhad"},{"id":2896,"title":"Design Pattern: State Pattern (Bahasa Indonesia) | CodingClass S1 ⦁ E8","url":"https://www.youtube.com/watch?v=VddM0mC9bfQ","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-20T03:18:14","created_at":"2021-08-19T12:25:39.495819","updated_at":"2021-08-19T12:25:39.495819","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2897,"title":"Menyelam Lebih Dalam Solid JS","url":"https://rahmatagungjulians.tech//blog/menyelam-lebih-dalam-solid-js","body":"Mari menyelam lebih dalam Solis JS yang menjadi pustaka JavaScript deklaratif, efisien, dan fleksibel untuk membangun antarmuka pengguna.","tags":"review","media":"web","thumbnail":null,"owner":"rahmatagungj@gmail.com (Rahmat Agung Julians)","draft":false,"original_published_at":"2021-08-19T00:00:00","created_at":"2021-08-19T12:26:05.982978","updated_at":"2021-08-19T12:26:05.982978","deleted_at":null,"source_id":73,"contributor":"Rahmat Agung Julians"},{"id":2890,"title":"Apa Itu Google Cloud Eventarc? (Bahasa Indonesia)","url":"https://www.youtube.com/watch?v=IN0MTv4ziIM","body":null,"tags":"","media":"video","thumbnail":null,"owner":"","draft":false,"original_published_at":"2021-08-18T02:40:02","created_at":"2021-08-18T09:32:40.817194","updated_at":"2021-08-18T09:32:40.817194","deleted_at":null,"source_id":62,"contributor":"PuloDev"},{"id":2891,"title":"Connecting Monika with Prometheus","url":"https://medium.com/hyperjump-tech/collecting-monika-with-prometheus-9faa7d484a30?source=rss----fabfd42372dc---4","body":null,"tags":"devops,software-development,monitoring,prometheus,javascript","media":"tulisan","thumbnail":null,"owner":"muslim","draft":false,"original_published_at":"2021-08-18T01:57:57","created_at":"2021-08-18T09:33:07.646896","updated_at":"2021-08-18T09:33:07.646896","deleted_at":null,"source_id":46,"contributor":"2co_p"},{"id":2889,"title":"Pengenalan Bahasa Go","url":"https://gadiskoding.my.id/pengenalan-bahasa-go.html","body":"Go disini artinya bukan pergi, ~ Let it Go","tags":"Golang, REST API","media":"tulisan","thumbnail":"/images/og.png","owner":"Artileda","draft":false,"original_published_at":"2021-08-16T11:42:47.744","created_at":"2021-08-16T11:43:07.756873","updated_at":"2021-08-16T11:43:07.756873","deleted_at":null,"source_id":null,"contributor":"Robocosan"},{"id":2892,"title":"Orthogonality pada Programming","url":"https://www.evilfactorylabs.org/alvnmfth/orthogonality-pada-programming-54h3","body":"Ketika mengerjakan existing project atau proyek yang sudah ada, waktu akan lebih banyak digunakan untuk memahami setiap bagian source code yang sudah ada sebelumnya. Perlu melakukan tracing code ketika mecoba build & run program, seperti kapan baris sekian dieksekusi, dimana melakukan perubahan tambahan, dan lain-lain. Kompleksitas dari proyeknya juga menambah tantangan lain ketika hendak menambah fitur yang diminta. Kalau nihil dokumentasi, maka perlu proses hand over dengan pemrogram sebelumnya. Panjang umur bagi kolega yang apabila membuat code mudah dipahami.\nSepertinya hidup sedikit lebih tenang jika tidak membuat bugs tujuh turunan (terhindar dari pertanyaan dan complain). Selain itu menyenangkan pula jika code kita mudah dipahami kolega.\nKetika fitur-fitur baru ditambahkan saat mengembangkan existing project, maka kemungkinan kompleksitas bertambah. Tapi, pengembangannya akan lebih mudah apabila tidak melibatkan atau mengubah barisan code yang sudah ada sebelumnya. Sistem atau proyek yang tidak perlu mengubah barisan code sebelumnya seperti ini dapat disebut orthogonal.\nOrthogonal\n\n\n\nSistem yang orthogonal adalah saat mengubah fitur B maka tidak akan mengganggu keadaan fitur A.\nIstilah orthogonal digunakan dalam bidang geometri untuk mendeskripsikan garis yang tidak bersinggungan atau independent dalam suatu grafik. \nBayangkan ada orang bawa motor bebek supra. Setiap menaikkan atau menurunkan kecepatan, maka perlu mengubah gigi (motor). Ketika mengubah gigi motor, gas motor harus turun. Kalau menaikkan gas saat menurunkan gigi, otomatis kecepatan motor turun drastis, efeknya kerusakan gear set. Beruntung kalau nggak jatuh atau mental. \nContoh dari masalah di atas adalah sistem yang tidak orthogonal. Karena untuk menggunakan satu fungsi, perlu untuk mengubah fungsi yang lain. \nAtau contoh lain yang sering digunakan untuk mengenalkan orthogonality ialah fungsi radio. Ketika melakukan pergantian channel maka hanya perlu menekan tombol next atau prev, tidak perlu menekan tombol pengubah suara dan lain-lain. \nPenerapan orthogonality pada frontend lebih sering diimplementasi saat memisahkan setiap komponen yang memiliki fungsi khusus, seperti event listening, styling, logic, dan request data melalui API. Penggunaan state management seperti redux atau penerapan css in js membantu kita untuk membuat proyek lebih orthogonal.\nimport { Suspense, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./styles.css\";\n\nexport default function ArticlePage() {\n  const [article, setArticle] = useState([]);\n\n  useEffect(() => {\n    // Melakukan fetch data dengan axios\n    (async function () {\n      const response = await axios.get(\n        \"https://jsonplaceholder.typicode.com/posts/1\"\n      );\n      setArticle(response.data);\n    })();\n  }, []);\n\n  // Menampilkan data saat aplikasi selesai memuat data\n  return (\n    <Suspense fallback={<div>page is loading...</div>}>\n      <h2>{article.title}</h2>\n      <p>{article.body}</p>\n    </Suspense>\n  );\n}\n\nArticlePage komponen yang me-render tampilan judul artikel dan kontennya setelah aplikasi berhasil memuat data dari API. Integrasi API memanfaatkan axios untuk memudahkan proses fetch data.\nContoh komponen React di atas ini belum orthogonal. Kenapa? Karena integrasi API masih dilakukan dalam satu komponen dengan UI logic. Saat mengganti library dari axios dengan yang lain otomatis akan mengganti logic UI-nya. Mungkin dengan cara memisahkan fungsi integrasi dengan UI akan mengurangi efek samping perubahan.\nimport { Suspense } from \"react\";\nimport \"./styles.css\";\n\nexport default function ArticlePage({ response }) {\n  // Menampilkan data saat aplikasi selesai memuat data\n  return (\n    <Suspense fallback={<div>page is loading...</div>}>\n      <ArticleContent article={response} />\n    </Suspense>\n  );\n}\n\nfunction ArticleContent({ article }) {\n  return (\n    <div>\n      <h2>{article.title}</h2>\n      <p>{article.body}</p>\n    </div>\n  );\n}\n\n\nDengan memisahkan fungsi logic dengan integrasi API, maka perubahan di masa depan akan lebih fleksibel dan adaptif. Untuk penerapan integrasi API dengan memanfaatkan state management, alur data pada aplikasi akan teratur.\nDalam kasus nyata mungkin komponen yang tetap bergantung dengan komponen lainnya akan masih terjadi. Karena komponen React masih memerlukan main component yang menghubungkan antar komponen dengan state management.\nSecara keuntungan, dengan membuat proyek yang orthogonal fungsi-fungsi dan komponen menjadi independen dan mengurangi resiko perubahan. Selain itu, keuntungan lainnya yaitu:\nCode lebih mudah dipahami\nMeningkatkan produktifitas \nMenghindari duplikasi code\n\n\n\nSekian, pembahasan tentang orthogonality dalam pemrograman. CMIIW!","tags":"pragmatic,dry","media":"tulisan","thumbnail":null,"owner":"Alvin Miftah","draft":false,"original_published_at":"2021-08-15T18:57:41","created_at":"2021-08-18T09:33:09.06449","updated_at":"2021-08-18T09:33:09.06449","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2893,"title":"Frontend development dari iPad","url":"https://www.evilfactorylabs.org/faultable/frontend-development-dari-ipad-go0","body":"Pertama dan yang paling utama adalah sebuah sangkalan: perhatikan bahwa gue menggunakan kata dari bukan di, yang berarti, iPad hanyalah sebagai jembatan untuk melakukan frontend development, oke?\nSebelum kita masuk topik pembahasan, hal wajib yang perlu dimiliki adalah sebuah devbox atau remote development server yang semoga sudah punya, ya? Jika belum, nanti suatu saat gue akan berbagi tentang mengatur devbox.\nSelain itu, disini gue menggunakan Blink sebagai SSH/Mosh client di iPad.\nWithout further ado, let’s dive.\nSemua komputer yang gue miliki (macbook, intel nuc, raspi) 80% kegunaannya hanyalah untuk SSH dan membuka peramban. Oke mungkin kadang gue buka Discord dan Apple Music/Spotify juga, but you got the point.\nLalu gue iseng membeli iPad yang gue impikan sih bisa menjadi alternatif dari penggunaan yang gue lakukan di desktop ataupun laptop gue. Sejauh ini gue yakinkan sudah 60% efektivitasnya, meskipun di weekday gue masih bergantung dengan perangkat desktop gue untuk menyelesaikan pekerjaan.\nMelakukan frontend development di iPad gue rasa masih sedikit painful, berbeda dengan backend development yang technically tidak harus bergantung dengan aplikasi yang menggunakan GUI, yang gue rasa hanya menggunakan terminal emulator pun sudah lebih dari cukup, lalu menggunakan curl ataupun httpie sebagai HTTP client.\nEsensinya untuk melakukan frontend development yang diperlukan hanyalah dua: Sebuah development environment dan peramban. Development environment disini kita menggunakan devbox dan peramban menggunakan Safari, karena semua peramban di iOS/iPad OS pada dasarnya adalah Safari.\nProgram utama yang gue gunakan di devbox hanya 3:\ntmux\nvim\nssh/mosh\nAkhir-akhir ini gue menggunakan SSH daripada mosh karena masalah Port Forward & dukungan truecolor yang somehow Blink gue tidak mendukung (padahal mosh di server gue pakai versi HEAD). Meskipun gue masih bisa hidup tanpa truecolor (dan port forward bukan jadi masalah dengan menempatkan reverse proxy), tapi gue masih nyaman dengan workflow seperti sekarang. Jika memang SSH menjadi masalah (karena fitur dari TCP) dan karena fitur dari iPad OS yang membatasi background service hanya sekian menit, mungkin koneksi SSH bisa dibungkus dengan paket UDP dengan memasang jaringan VPN via Wireguard.\n…atau bisa menyerah dengan menggunakan mosh.\nAnyway, di level peramban biasanya pengembang membutuhkan ekstensi untuk membuat proses development menjadi lebih mudah. Gue personally jarang banget menggunakan ekstensi (meskipun memasangnya) dan juga gue jarang banget menggunakan devtool selain hanya untuk inspect permintaan HTTP.\nSafari di iPad dan iOS sejauh ini belum menawarkan devtool ke penggunanya, tapi nanti akan gue jelaskan alternatifnya jika memang ekstensi dan devtools adalah sebuah keharusan.\nGue bukan penggemar berat VSCode, tapi gue rasa penyunting kode ini adalah yang paling populer digunakan oleh rekan pengembang sekalian.\nVSCode (dari Microsoft) memiliki ekstensi “remote SSH” yang sederhananya mengakses workspace yang ada di remote server melalui VSCode yang ada di local. Remote SSH ini memiliki DX yang cukup baik, namun terbatas hanya di VSCode (tidak ada di VSCodium) dan yang paling penting: tidak ada versi untuk iPad.\nJika memang menggunakan VSCode sebuah keharusan, gue rekomendasikan menggunakan code-server yang lumayan ringan untuk dijalankan. Tampilannya adalah seperti ini:\n\nTerlihat sangat familiar, bukan? Semua yang kamu butuhkan dari terminal, debug console, dsb bisa diakses disana. Instalasi code-server relatif sangat mudah, dan yang perlu diketahui adalah extension marketplace nya bukanlah yang dari official VSCode tawarkan (VS Code Marketplace) melainkan dari Open VSX Registry yang dipelihara oleh Eclipse Foundation.\nCara aksesnya relatif mudah: bisa langsung tembak dengan <ip>:<port> atau bisa berlindung dibelakang reverse proxy. Gue personally merekomendasikan untuk berlindung dibalik reverse proxy khususnya bila hanya port 80 dan 443 yang di expose ataupun kalau karena males setting VPN.\nIni adalah workflow utama gue!\nTidak ada yang spesial dari ini, tapi workflow ini yang paling nyaman gue gunakan terlepas perangkat yang gue gunakan.\n\nUntuk vim (penyunting teks) gue menggunakan Neovim karena mengapa tidak dan untuk tmux (terminal multiplexer) ini menurut gue sebuah keharusan agar gue bisa datang dan pergi sesuka hati gue ke workspace gue di devbox tanpa perlu mengkhawatirkan kehilangan state yang ada (kecuali crash ataupun rebooted)\nJika kurang suka dengan tmux in any reason, mungkin bisa menggunakan GNU Screen yang technically sama-sama terminal multiplexer juga.\nPertama dan yang paling utama, keluaran dari console.log akan tampil di terminal gue (is anyone anti console.log?).\nJika console.log tidak cukup dan menggunakan curl adalah pekerjaan yang painful, gue bisa kasih alternatif: menggunakan virtual browser.\nPernah menggunakan rabb.it? Nah, technically seperti itu, cuman untuk melakukan development bukan untuk nonton bo…\nbola!\nNah, biar lebih sederhana bisa menggunakan docker image nya jlesage/docker-firefox untuk menjalankan Firefox yang bisa diakses di peramban.\n\nWow, peramban didalam peramban!\nAlamat IP yang ada di peramban tersebut milik docker0 yang sederhananya untuk bisa mengakses port yang ada di host dari container. Jika terlihat ugly atau tidak sesuai keinginan, DNS pastilah jawabannya :)\nMengapa menggunakan Firefox? Karena gue pengguna berat Firefox. Jika tidak ingin menggunakan FF, silahkan cari alternatif yang menggunakan Chrome ataupun yang lainnya. Virtual browser ini technically menggunakan protokol VNC, tapi daripada stream keseluruhan DE, klo virtual browser ya hanya peramban saja.\nSilahkan pasang ekstensi yang kamu butuhkan disana, dan jangan lupa mengatur volume yang persistent ke si container.\nJika kurang puas dengan ukuran layar iPad, mungkin bisa pertimbangkan membeli dongle (fanboy will understand) untuk port Lightning to HDMI dan gunakan monitor eksternal favorit kalian ataupun yang ada aja (misal monitor di kamar hotel).\nUntuk keyboard gue menggunakan Smart Keyboard Folio karena iPad gue adalah yang Air. Gue ada Magic Keyboard juga yang gue pakai di desktop tapi bila menggunakan Smart Keyboard Folio ini, tidak perlu menggunakan bluetooth untuk penggunaannya.\nMouse! Ya, mouse! Gue bukan fans berat mouse tapi semua mouse yang mendukung koneksi via bluetooth gue rasa bisa berjalan juga di iPad.\nJika ada yang terlewat (tools, workflow, dsb), please let me know!\nGue menjadikan iPad sebagai alternatif aja, bukan sebagai alat utama. Di banyak kasus untuk aktivitas development, gue lebih banyak dilakuin di desktop. Biasanya iPad kepake kalau lagi diluar dan ada hal yang benar-benar urgent di kantor ataupun karena ingin mengerjakan side-project yang tidak-akan-pernah-selesai-tapi-bikin-side-project-baru-lagi~\nOverall gue belum terlalu puas dengan setup seperti ini (khususnya di penggunaan virtual browser) meskipun ada peramban alternatif di iOS/iPad OS yang khusus untuk development yakni Inspect Browser tapi poinnya peramban tersebut tetaplah WebKit :))\nUntuk workload yang gak ribet-ribet amat (seperti ngetik tulisan) kalau lagi males nyalain komputer atau buka laptop (for some reason) yaa gue menggunakan iPad ini.\nSebagai penutup, tulisan adalah sedikit gambaran terkait melakukan frontend development dari iPad. Untuk murni backend development gue rasa lumayan puas terlebih karena gak perlu berurusan dengan devtool yang biasa ditawarkan oleh peramban.\nSetiap orang memiliki workflow yang berbeda-beda, dan ini adalah yang gue gunakan. Bagaimana jika kamu membagikan workflow kamu juga?","tags":"frontend,ipad,workflow","media":"tulisan","thumbnail":null,"owner":"Rizaldy","draft":false,"original_published_at":"2021-08-15T10:28:59","created_at":"2021-08-18T09:33:09.06449","updated_at":"2021-08-18T09:33:09.06449","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2888,"title":"Haskell #1: Pengantar","url":"https://youtu.be/BSWoegYLC3E","body":"Haskell adalah bahasa pemrograman dengan paradigma fungsional murni, dan serba guna. Apa saja sih yang disediakan oleh Haskell ? dan bagaimana rupa sintaksis alienya?","tags":"haskell, fungsional programming, kalkulus lambda","media":"video","thumbnail":"https://i.ytimg.com/vi/BSWoegYLC3E/maxresdefault.jpg","owner":"Idiosemantik","draft":false,"original_published_at":"2021-08-15T00:00:00","created_at":"2021-08-16T10:51:27.427424","updated_at":"2021-08-16T10:51:27.427424","deleted_at":null,"source_id":null,"contributor":"Robocosan"},{"id":2894,"title":"Making Smol Shopify App for Fun and Profits...","url":"https://www.evilfactorylabs.org/tibudiyanto/making-smol-shopify-app-for-fun-and-profits-3bm2","body":"While I was helping my wife setting up her shopify store, I notice there wasn't much shipping cost counter app to choose from. So I thought, why don't I make some quick app to do this?\nShopify has lots of ways to enhance a store capability. For this exercise, I am using their CarrierService thingy. In short, Shopify will issue a callback to an endpoint with some order informations everytime a user checks out. Our job here is to respond with shipping rate(s) information. \n\nThis is our MVP:\nUser that checks out can get a shipping cost that is added automatically to his / her total\nUse only 1 shipping carrier (J&T)\nAdd unique identifier to the amount (for manual bank transfer checking)\nLet's setup our build plan.\nPrepare all the data:\nprepare shipping cost data\nlook at shopify request and payload\nRegister our endpoint as callback\n\n\n???\n\n\nProfit.\n\n\n\n\n  \n  \n  Preparing the data\n\n\nNow, we already have an excel sheet of shipping cost from her place of business to all kecamatan across Indonesia, so everything is quite trivial to build. For this private app, I am using sqlite, and Flask.\nFirst, lets look at the shipping cost data. It looks like this after I save that excel into a CSV.\narea,asal,kecamatan,kota_tujuan,cost, estimate\nSURABAYA,SURABAYA,5 KOTO KAMPUNG DALAM,PADANG PARIAMAN,\" 78000 \", 2-4 hari \nSURABAYA,SURABAYA,5 KOTO TIMUR,PADANG PARIAMAN,\" 78000 \", 2-5 hari \nSURABAYA,SURABAYA,7 KOTO SUNGAI SARIK,PADANG PARIAMAN,\" 62000 \", 3-7 hari \nSURABAYA,SURABAYA,ABAB,PENUKAL ABAB LEMATANG ILIR,\" 61000 \", 2-7 hari \nSURABAYA,SURABAYA,ABANG,KARANG ASEM,\" 23000 \", 2-7 hari \nSURABAYA,SURABAYA,ABELI,KENDARI,\" 68000 \", 2-7 hari \nSURABAYA,SURABAYA,ABENAHO,YALIMO,\" 197000 \", 2-7 hari \n\nThat doesn't look terribly bad. Notice how the cost is a string instead of an integer. Using sqlite-utils I load that csv file into a sqlite database.\nsqlite-utils insert shiptok.sqlite shipping_cost shipping_cost.csv --csv\n\nNext, with little SQL incantation, we can change the cost column into an integer. Open the db with sqlite3 shiptok.sqlite then follow this incantation:\nCREATE TABLE shipping_cost_cleaned as\nSELECT area, asal, kecamatan, kota_tujuan, CAST(cost as decimal) cost, estimate\nFROM shipping_cost;\n\nWe gucci.\nLooking at Shopify's request, we know there are 2 major values that we need to pay attention to: destination and items. We don't really care about origin because it always points to our business location. This is where things get tricky; on their default settings, there is no kecamatan field, but our shipping_cost table only has kecamatan as an identifier. So its time to get funky.\nWe know for sure that postal code is a required field. Abusing this fact, I am adding this postal_code data and then finding the kecamatan via the postal code.\nSELECT CAST(cost as decimal), trim(estimate)\nFROM shipping_cost sc\nJOIN postal_code pc ON pc.sub_district = sc.kecamatan\n  AND kecamatan = :kecamatan \n\nAnd Bob's your uncle.\nWhen we went live, we got reports that not all postal code is bueno; there are some mismatch values on kecamatan column on postal_code github data and J&T Shipping cost data (spelling error, misnaming and etc). So we need a better (funkier) solution. I chose to use the next identifier that are province and city. My algorithm is quite simple, give me the maximum shipping cost to a given city and province. I know it is not exactly 'right' but this is not the time nor place for razor sharp accuracy. Voila:\nSELECT CAST(cost as decimal), trim(estimate)\nFROM shipping_cost s\nJOIN postal_code pc on pc.city = s.kota_tujuan \n  AND pc.city = UPPER(:city)\nJOIN provinces p on p.province_code = pc.province_code \n  AND p.code = UPPER(:province)\nORDER BY CAST(cost as decimal) DESC\nLIMIT 1\n\nNot the prettiest, but it works.\nSimple stuff really:\ndef get_shipping_straightforward(req: RateRequest):\n    destination = req.destination\n    # get postal_code\n    postal_code = destination.postal_code\n    # First Query above\n    return jnt.get_shipping_info(postal_code)\n\n\ndef get_shipping_estimate(req: RateRequest):\n    destination = req.destination\n    # get province and city\n    province = destination.province\n    city = destination.city\n    # find estimate based of max province, query above\n    return jnt.get_shipping_estimate(province, city)\n\n\n@callback.route(\"\", methods=[\"POST\"])\ndef shipping_callback():\n    req = RateRequest(**request.json[\"rate\"])\n\n    shipping_rate = get_shipping_straightforward(req) or get_shipping_estimate(req)\n\n    if not shipping_rate:\n        raise Exception(\"No shiping rate avail\")\n\n    rate_per_1_kg, estimate = shipping_rate\n\n    quantity = sum([item.quantity for item in req.items])\n    # One box can fit 3 items, and each box is 1 kg.\n    total_approximate_weight = math.ceil(quantity / 3)\n\n    randomizer = randint(10, 100)\n\n    expected_shopify_rates = [\n        Rate(\n            service_name=f\"J&T\",\n            service_code=\"J&T Regular\",\n            total_price=(rate_per_1_kg * total_approximate_weight + randomizer) * 100,\n            description=estimate,\n        )\n    ]\n\n    response = RateResponse(rates=expected_shopify_rates)\n\n    return jsonify(response.dict())\n\nRandomizer is there just for easy identifier (in the case of manual bank transfer).\nNow whats left to do is deploying and registering your callback. \nI just go to replit.com and deploy the Flask app there. \nAfter you know your replit url, register your callback to your shopify store using this API. \nSo far, this API has served more than 50 orders and up north of 50 mio IDR in value with very little to no cost (being in replit). Maybe I'll open source it after I cleaned up all that git committed environment variable. Or, maybe real API integration to other providers? I don't know.\nThat is all I wanted to share with y'all today. Hit me up on twitter @tibudiyanto\n. Stay kool guys, gals, and my non-binary pals!","tags":"shopify,flask,python,sql","media":"tulisan","thumbnail":null,"owner":"theo","draft":false,"original_published_at":"2021-08-14T14:52:24","created_at":"2021-08-18T09:33:09.06449","updated_at":"2021-08-18T09:33:09.06449","deleted_at":null,"source_id":70,"contributor":"evilfactorylabs"},{"id":2886,"title":"Tips Soft Skill untuk Developer ala Pria Purnama","url":"https://anchor.fm/ceritanya-developer/episodes/Tips-Soft-Skill-untuk-Developer-ala-Pria-Purnama-e15s55f","body":"Banyak orang berpikir bahwa menjadi developer itu hanya tentang kemampuan teknis. Sehingga banyak developer junior yang kurang mengasah soft skill-nya. Padahal mengabaikan soft skill bisa mengakibatkan kurangnya komunikasi yang efektif dengan tim, klien hingga mempengaruhi karir.\n\n\"Ilmu yang saya pelajari dari mentor saya dulu. Jika kita ingin menyampaikan hal yang penting, namun proses penyampaiannya kurang baik, itu kan enggak diterima. Jadi, apa yang mau disampaikan dan bagaimana cara menyampaikannya, keduanya sama penting,\" papar Pria Purnama.\n\nCTO Kata.Ai tersebut selalu menekankan pentingnya developer untuk mengasah soft skill agar memudahkan proses kerjasama, karena developer itu nggak kerja sendiri. Yuk, dengerin tips lainnya dari Pria Purnama hanya di Ceritanya Developer kali ini.","tags":"","media":"podcast","thumbnail":null,"owner":"Riza Fahmi","draft":false,"original_published_at":"2021-08-13T09:17:01","created_at":"2021-08-13T12:15:05.871891","updated_at":"2021-08-13T12:15:05.871891","deleted_at":null,"source_id":3,"contributor":"rizafahmi"}],"total":1390}